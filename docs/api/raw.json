{"majorversion": 3, "filemap": {"paginator.js": {"classlist": ["Paginator"], "name": "paginator.js", "module": "node"}, "button.js": {"classlist": ["Button", "ComboBox", "RadioButton"], "name": "button.js", "module": "base"}, "datasource.js": {"classlist": ["Record", "RecordSet", "DataSource", "DataSource.Ajax", "DataSource.Get", "DataSource.Local"], "name": "datasource.js", "module": "cookie"}, "container.js": {"classlist": ["Module", "Overlay", "Panel", "SimpleDialog"], "name": "container.js", "module": "button"}, "log.js": {"classlist": [], "name": "log.js", "module": "json"}, "node.js": {"classlist": ["EventCache", "DOM", "NodeList"], "name": "node.js", "module": "log"}, "vector.js": {"classlist": ["Vector", "Vector.Rectangle", "Vector.RoundedRectangle", "Vector.Ellipse", "Vector.Circle", "Vector.Line", "Vector.Image", "Vector.Text", "Vector.Path", "VectorView"], "name": "vector.js", "module": "ua"}, "treeview.js": {"classlist": ["Node", "TreeView"], "name": "treeview.js", "module": "tabs"}, "json.js": {"classlist": ["JSON"], "name": "json.js", "module": "jet"}, "tabs.js": {"classlist": ["Tab", "TabView"], "name": "tabs.js", "module": "swf"}, "datatable.js": {"classlist": ["DataTable"], "name": "datatable.js", "module": "datasource"}, "resize.js": {"classlist": ["Resize"], "name": "resize.js", "module": "paginator"}, "ua.js": {"classlist": ["UA"], "name": "ua.js", "module": "treeview"}, "imageloader.js": {"classlist": ["Image", "ImageLoader"], "name": "imageloader.js", "module": "history"}, "swf.js": {"classlist": [], "name": "swf.js", "module": "simpleprogressbar"}, "jet.js": {"classlist": ["Lang", "Array", "Hash", "Core", "Get", "jet"], "name": "jet.js", "module": "io"}, "history.js": {"classlist": ["History"], "name": "history.js", "module": "dragdrop"}, "io-xdr.js": {"classlist": [], "name": "io-xdr.js", "module": "imageloader"}, "dragdrop.js": {"classlist": ["Drag", "DragDrop"], "name": "dragdrop.js", "module": "datatable"}, "cookie.js": {"classlist": ["Cookie"], "name": "cookie.js", "module": "container"}, "sizzle.js": {"classlist": [], "name": "sizzle.js", "module": "resize"}, "io.js": {"classlist": ["IO"], "name": "io.js", "module": "io"}, "io-xsl.js": {"classlist": [], "name": "io-xsl.js", "module": "io"}, "anim.js": {"classlist": ["Easing", "TimeFrame", "Tween"], "name": "anim.js", "module": "anim"}, "spbar.js": {"classlist": ["SimpleProgressBar"], "name": "spbar.js", "module": "resize"}, "base.js": {"classlist": ["OOP", "EventTarget", "Attribute", "Base", "Utility", "Widget", "utils.Mouse"], "name": "base.js", "module": "anim"}}, "modules": {"tabs": {"description": "A TabView", "submodules": [], "classlist": ["Tab", "TabView"], "filelist": ["treeview.js"], "subdata": {}, "requires": "jet, lang, node, base", "name": "tabs"}, "io": {"description": "Handles AJAX requests", "submodules": ["io-xdr", "io-xsl"], "classlist": ["IO"], "filelist": ["io-xsl.js", "io.js", "jet.js"], "subdata": {"io-xdr": {"name": "ImageLoader", "description": "Adds functionality to make cross-domain ajax calls"}, "io-xsl": {"name": "IO", "description": "Cross-browser XSL Transformations support"}}, "name": "io"}, "paginator": {"description": "Paginator widget", "submodules": [], "classlist": ["Paginator"], "filelist": ["resize.js"], "subdata": {}, "requires": "jet, lang, node, base, datasource", "name": "paginator"}, "container": {"description": "Contains widgets that act as containers, windows, dialogs", "submodules": [], "classlist": ["Module", "Overlay", "Panel", "SimpleDialog"], "filelist": ["cookie.js"], "subdata": {}, "requires": "jet, node, base", "name": "container"}, "log": {"description": "Base structure for logging", "submodules": [], "classlist": [], "filelist": ["node.js"], "subdata": {}, "name": "log"}, "jet": {"description": "<p>Based on YUI3's namespace</p>\r\n<p>This module allows to load different modules asynchronously and to reuse\r\nthem when they were already loaded. Its basic use looks like:</p>", "submodules": [], "classlist": ["Lang", "Array", "Hash", "Core", "Get", "jet"], "filelist": ["json.js"], "subdata": {}, "name": "jet"}, "swf": {"description": "SWFObject adapted to Jet", "submodules": [], "classlist": [], "filelist": ["tabs.js"], "subdata": {}, "name": "swf"}, "json": {"description": "Adds JSON support when needed. If JSON is found natively, this module\nis not loaded but the $.JSON object is still found if needed", "submodules": [], "classlist": ["JSON"], "filelist": ["log.js"], "subdata": {}, "requires": "jet", "name": "json"}, "dragdrop": {"description": "Provides functionality for dragging and dropping elements", "submodules": [], "classlist": ["Drag", "DragDrop"], "filelist": ["history.js"], "subdata": {}, "requires": "lang, base, node", "name": "dragdrop"}, "datasource": {"description": "DataSources are different ways of accessing data and parsing it into an schema", "submodules": [], "classlist": ["Record", "RecordSet", "DataSource", "DataSource.Ajax", "DataSource.Get", "DataSource.Local"], "filelist": ["datatable.js"], "subdata": {}, "name": "datasource"}, "node": {"description": "Node collections and DOM abstraction", "submodules": [], "classlist": ["EventCache", "DOM", "NodeList"], "filelist": ["paginator.js"], "subdata": {}, "requires": "lang, ua", "name": "node"}, "anim": {"description": "Animations", "submodules": [], "classlist": ["Easing", "TimeFrame", "Tween"], "filelist": ["anim.js", "base.js"], "subdata": {}, "name": "anim"}, "base": {"description": "The Base module provides base classes for Utilities and Widgets.", "submodules": [], "classlist": ["OOP", "EventTarget", "Attribute", "Base", "Utility", "Widget", "utils.Mouse"], "filelist": ["button.js"], "subdata": {}, "requires": "lang, dom", "name": "base"}, "cookie": {"description": "Provides abstracion for easier use of cookies", "submodules": [], "classlist": ["Cookie"], "filelist": ["datasource.js"], "subdata": {}, "name": "cookie"}, "datatable": {"description": "Provides a DataTable widget that can be sorted and linked to a DataSource", "submodules": [], "classlist": ["DataTable"], "filelist": ["dragdrop.js"], "subdata": {}, "requires": "base, datasource", "name": "datatable"}, "resize": {"description": "Provides a utility for resizing elements", "submodules": [], "classlist": ["Resize"], "filelist": ["sizzle.js", "spbar.js"], "subdata": {}, "requires": "jet, lang, base", "name": "resize"}, "simpleprogressbar": {"description": "A simple progressbar for when a lot of modules are needed", "submodules": [], "classlist": ["SimpleProgressBar"], "filelist": ["swf.js"], "subdata": {}, "name": "simpleprogressbar"}, "button": {"description": "Different kinds of buttons and form elements", "submodules": [], "classlist": ["Button", "ComboBox", "RadioButton"], "require": "jet, node, base", "filelist": ["container.js"], "subdata": {}, "name": "button"}, "vector": {"description": "Provides cross-browser vector graphics implementation based on SVG and VML", "submodules": [], "classlist": ["Vector", "Vector.Rectangle", "Vector.RoundedRectangle", "Vector.Ellipse", "Vector.Circle", "Vector.Line", "Vector.Image", "Vector.Text", "Vector.Path", "VectorView"], "filelist": [], "subdata": {}, "requires": "jet, lang, node, base, anim", "name": "vector"}, "imageloader": {"description": "Provides functionality for preloading images and fixing PNGs in IE", "submodules": [], "classlist": ["Image", "ImageLoader"], "filelist": ["io-xdr.js"], "subdata": {}, "requires": "jet, lang, node", "name": "imageloader"}, "treeview": {"description": "TreeView module", "submodules": [], "classlist": ["Node", "TreeView"], "filelist": ["ua.js"], "subdata": {}, "requires": "jet, node, base", "name": "treeview"}, "ua": {"description": "Browser sniffing", "submodules": [], "classlist": ["UA"], "filelist": ["vector.js"], "subdata": {}, "name": "ua"}, "history": {"description": "The History module provides the hability to use the browser's back and forward button\r\nwithout refreshing the page.", "submodules": [], "classlist": ["History"], "filelist": ["imageloader.js"], "subdata": {}, "uses": "jet, ua, json, base", "name": "history"}}, "classmap": {"Paginator": {"name": "Paginator", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A simple paginator that works on top of a data source"}], "namespace": "", "module": "paginator", "guessedname": "Paginator", "methods": {"goTo": {"chainable": "", "params": [{"type": "Number", "name": "page", "description": ""}], "description": "Go to a certain page", "guessedname": "goTo", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "paginator.js", "guessedtype": "function", "shortname": "Paginator", "configs": {"lastText": {"description": "The text of the \"last\" button", "writeonce": "", "default": "\"last >>\"", "guessedname": "lastText", "guessedtype": "property", "type": "String"}, "pageCount": {"readonly": "", "type": "Number", "description": "The number of pages in the paginator", "guessedname": "pageCount", "guessedtype": "property"}, "recordSet": {"required": "", "type": "RecordSet", "description": "A RecordSet with the data the paginator should handle", "guessedname": "recordSet", "guessedtype": "property"}, "firstLast": {"default": "true", "type": "Boolean", "description": "Wheter the \"First\" and \"Last\" buttons should appear", "guessedname": "firstLast", "guessedtype": "property"}, "prevNext": {"default": "true", "type": "Boolean", "description": "Wheter the \"previous\" and \"next\" buttons should appear", "guessedname": "prevNext", "guessedtype": "property"}, "pagesShown": {"default": "5", "type": "Number", "description": "Number of pages that should be listed in the paginator (1, 2, 3...)", "guessedname": "pagesShown", "guessedtype": "property"}, "firstText": {"description": "The text of the \"first\" button", "writeonce": "", "default": "\"<< first\"", "guessedname": "firstText", "guessedtype": "property", "type": "String"}, "recordsPerPage": {"default": "10", "type": "Number", "description": "Number of records each page should show", "guessedname": "recordsPerPage", "guessedtype": "property"}, "currentPage": {"guessedtype": "property", "type": "Number", "description": "The current selected page. If set in the config, \r\nthe paginator will go directly to that page when rendered", "guessedname": "currentPage", "writeonce": ""}, "prevText": {"description": "The text of the \"previous\" button", "writeonce": "", "default": "\"< prev\"", "guessedname": "prevText", "guessedtype": "property", "type": "String"}, "nextText": {"description": "The text of the \"next\" button", "writeonce": "", "default": "\"next >\"", "guessedname": "nextText", "guessedtype": "property", "type": "String"}}, "description": "A simple paginator that works on top of a data source"}, "NodeList": {"name": "NodeList", "description": "A collection of DOM Nodes", "constructors": [{"params": [{"type": "Array|DOMCollection|DOMNode", "name": "nodes", "description": ""}, {"type": "DOMNode|Document", "name": "root", "description": ""}], "description": "A collection of DOM Nodes"}], "namespace": "", "module": "node", "guessedname": "NodeList", "file": "node.js", "guessedtype": "function", "shortname": "NodeList", "methods": {"getDocument": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the documents of all the nodes in the collection that are Iframes", "guessedname": "getDocument", "guessedtype": "function"}, "show": {"chainable": "", "description": "Shows all nodes", "guessedname": "show", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Fires the focus event", "guessedname": "focus", "guessedtype": "function"}, "height": {"chainable": "", "params": [{"type": "String|Number", "name": "[height]", "description": ""}], "description": "Gets/sets the height of all the nodes in the collection", "guessedname": "height", "guessedtype": "function"}, "toggle": {"chainable": "", "description": "If a node in the collection is hidden, it shows it. If it is visible, it hides it.", "guessedname": "toggle", "guessedtype": "function"}, "ready": {"chainable": "", "params": [{"type": "Function", "name": "callback", "description": ""}], "description": "Executes a callback when the DOM to which the first node in the collection belongs is ready", "guessedname": "ready", "guessedtype": "property"}, "animate": {"chainable": "", "params": [{"type": "Hash", "name": "props", "description": ""}, {"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Animates all members of the node list. <strong>Requires the Anim module</strong>", "guessedname": "animate", "guessedtype": "function"}, "find": {"return": {"type": "NodeList", "description": ""}, "params": [{"type": "String", "name": "query", "description": ""}], "description": "Finds all the nodes below the ones in the current collection that match the search query", "guessedname": "find", "guessedtype": "function"}, "append": {"description": "Appends nodes to the ones in the current node list", "chainable": "", "param": "{DOMNode|Array|NodeList} appended", "params": [{"type": "DOMNode|Array|NodeList", "name": "appended", "description": ""}], "guessedname": "append", "guessedtype": "function"}, "previous": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the previous siblings of the nodes in the collection", "guessedname": "previous", "guessedtype": "function"}, "hide": {"chainable": "", "description": "Hides all nodes", "guessedname": "hide", "guessedtype": "function"}, "parent": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the parents of the current nodes", "guessedname": "parent", "guessedtype": "function"}, "slideUp": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to slide up, changing their height and setting their overflow\r\nto hidden for the duration of the animation. <strong>Requires the Anim module</strong>", "guessedname": "slideUp", "guessedtype": "function"}, "next": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the next siblings of the nodes in the collection", "guessedname": "next", "guessedtype": "function"}, "setClass": {"chainable": "", "params": [{"type": "String", "name": "sClass", "description": ""}], "description": "Sets the class name of all nodes in the collection", "guessedname": "setClass", "guessedtype": "function"}, "width": {"description": "Gets/sets the width of all the nodes in the collection", "memberof": "NodeList", "chainable": "", "params": [{"type": "String|Number", "name": "[width]", "description": ""}], "guessedname": "width", "guessedtype": "function"}, "appendTo": {"chainable": "", "params": [{"type": "DOMNode|NodeList", "name": "target", "description": ""}], "description": "Appends all nodes in the current collection to the target node", "guessedname": "appendTo", "guessedtype": "function"}, "fadeIn": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to fade in. <strong>Requires the Anim module</strong>", "guessedname": "fadeIn", "guessedtype": "function"}, "toggleClass": {"chainable": "", "params": [{"type": "String", "name": "sClass", "description": ""}], "description": "Adds/removes a certain class from all nodes in the collection", "guessedname": "toggleClass", "guessedtype": "function"}, "css": {"chainable": "", "params": [{"type": "String|Hash", "name": "key", "description": ""}, {"type": "String", "name": "[value]", "description": ""}], "description": "Gets or sets CSS styles", "guessedname": "css", "guessedtype": "function"}, "addClass": {"chainable": "", "description": "Adds a number of classes to all nodes in the collection\r\nTakes multiple string parameters", "guessedname": "addClass", "guessedtype": "function"}, "insertBefore": {"chainable": "", "params": [{"type": "DOMNode|NodeList", "name": "before", "description": ""}], "description": "Inserts all nodes in the current node list before the target node", "guessedname": "insertBefore", "guessedtype": "function"}, "fadeOut": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to fade out. <strong>Requires the Anim module</strong>", "guessedname": "fadeOut", "guessedtype": "function"}, "clone": {"return": {"type": "NodeList", "description": ""}, "params": [{"type": "Boolean", "name": "deep", "description": " If true, all nodes in the brach are cloned. If not, only the ones in the collection"}], "description": "Returns a new NodeList with all nodes cloned from the current one", "guessedname": "clone", "guessedtype": "function"}, "removeClass": {"chainable": "", "description": "Removes a number of classes from all nodes in the collection.\r\nTakes multiple string parameters", "guessedname": "removeClass", "guessedtype": "function"}, "stop": {"chainable": "", "description": "Makes the current animation for this nodelist stop. <strong>Requires the Anim module</strong>", "guessedname": "stop", "guessedtype": "function"}, "unbind": {"chainable": "", "params": [{"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Removes an event listener from all the nodes", "guessedname": "unbind", "guessedtype": "function"}, "link": {"return": {"type": "NodeList", "description": ""}, "params": [{"type": "NodeList", "name": "nodelist", "description": ""}], "description": "Returns a new NodeList containing all the nodes in the current list and the ones in the new one\r\nUseful for applying properties to a bigger group of nodes, while keeping the original references", "guessedname": "link", "guessedtype": "function"}, "offset": {"return": {"type": "Hash", "description": ""}, "description": "Returns an object literal containing:\r\n<ul>\r\n<li><strong>top</strong>: top position in px</li>\r\n<li><strong>left</strong>: left position in px</li>\r\n<li><strong>width</strong>: width in px</li>\r\n<li><strong>height</strong>: height in px</li>\r\n</ul>", "guessedname": "offset", "guessedtype": "function"}, "slideDown": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to slide down, changing their height and setting their overflow\r\nto hidden for the duration of the animation. <strong>Requires the Anim module</strong>", "guessedname": "slideDown", "guessedtype": "function"}, "on": {"chainable": "", "params": [{"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Adds an event listener to all the nods in the list", "guessedname": "on", "guessedtype": "function"}, "prependTo": {"chainable": "", "params": [{"type": "DOMNode|NodeList", "name": "target", "description": ""}], "description": "Inserts all nodes in the current collection before the first child of the target node", "guessedname": "prependTo", "guessedtype": "function"}, "unbindAll": {"chainable": "", "params": [{"type": "Boolean", "name": "crawl", "description": ""}], "description": "Removes all event listeners from all the current nodes\r\nIf \"crawl\" is true, it also removes them from all the nodes in the branches defined by the nodes", "guessedname": "unbindAll", "guessedtype": "function"}, "attr": {"chainable": "", "params": [{"type": "String|Hash", "name": "key", "description": ""}, {"type": "String", "name": "[value]", "description": ""}], "description": "Gets or sets tag attributes to the nodes in the collection", "guessedname": "attr", "guessedtype": "function"}, "children": {"return": {"type": "NodeList", "description": ""}, "params": [{"type": "String|Number", "name": "filter", "description": " Return only the children that match the tag or index in this parameter"}], "description": "Returns a new NodeList with all the children of the current nodes", "guessedname": "children", "guessedtype": "function"}, "html": {"chainable": "", "params": [{"type": "String", "name": "html", "description": ""}], "description": "Gets or sets the innerHTML of all the nodes in the node list", "guessedname": "html", "guessedtype": "function"}, "remove": {"chainable": "", "params": [{"type": "Boolean", "name": "keepEvents", "description": ""}], "description": "Removes all the nodes from the DOM tree.\r\nUnless keepEvents is true, it alse removes all event listeners from the nodes", "guessedname": "remove", "guessedtype": "function"}, "fadeToggle": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to fade in or out. <strong>Requires the Anim module</strong>", "guessedname": "fadeToggle", "guessedtype": "function"}, "currentStyle": {"return": {"type": "CSSDeclaration", "description": ""}, "description": "Returns the computed style of the first node in the collection", "guessedname": "currentStyle", "guessedtype": "function"}, "each": {"chainable": "", "params": [{"type": "Function", "name": "callback", "description": ""}], "description": "Iterates through the NodeList\r\nThe callback is passed a reference to the node and an iteration index. \r\nThe \"this\" keyword also refers to the node. ie:<br/>\r\n<code>$(\"div\").each(function (node, i) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (i % 2 == 1) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(node).addClass(\"even\");<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;} else {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(node).addClass(\"odd\");<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br/>\r\n});</code>", "guessedname": "each", "guessedtype": "function"}, "hasClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": ""}], "description": "Returns true if the first node in the collection has the className CSS class", "guessedname": "hasClass", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Fires the blur event", "guessedname": "blur", "guessedtype": "function"}, "first": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the first children of the nodes in the collection", "guessedname": "first", "guessedtype": "function"}}}, "Overlay": {"name": "Overlay", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "An Overlay is a Module that floats in the page (doesn't have position static)"}], "namespace": "", "module": "container", "guessedname": "Overlay", "extends": "Module", "superclass": "Module", "file": "container.js", "guessedtype": "function", "shortname": "Overlay", "configs": {"right": {"type": "Number", "description": "The right position in pixels", "guessedname": "right", "guessedtype": "property"}, "center": {"default": "true", "type": "Boolean", "description": "If true, the overlay is positioned in the center of the page", "guessedname": "center", "guessedtype": "property"}, "bottom": {"type": "Number", "description": "The bottom position in pixels", "guessedname": "bottom", "guessedtype": "property"}, "top": {"type": "Number", "description": "The top position in pixels", "guessedname": "top", "guessedtype": "property"}, "height": {"default": "0", "type": "Number", "description": "The height of the overlay.\r\nIf set to 0 (zero) the height changes with the content", "guessedname": "height", "guessedtype": "property"}, "draggable": {"default": "false", "description": "If true, the overlay can be dragged", "guessedname": "draggable", "guessedtype": "property"}, "width": {"default": "300", "type": "Number", "description": "The width of the overlay", "guessedname": "width", "guessedtype": "property"}, "fixed": {"default": "false", "type": "Boolean", "description": "If true, the overlay is position is set to fixed", "guessedname": "fixed", "guessedtype": "property"}, "left": {"type": "Number", "description": "The left position in pixels", "guessedname": "left", "guessedtype": "property"}}, "description": "An Overlay is a Module that floats in the page (doesn't have position static)"}, "Tween": {"name": "Tween", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A Tween is a variation of a property during a lapse of time that has a certain easing associated"}], "namespace": "", "module": "anim", "guessedname": "Tween", "methods": {"play": {"chainable": "", "params": [{"type": "Number", "name": "startTime", "description": ""}, {"type": "Number", "name": "frameLength", "description": ""}], "description": "Play the tween's animation", "guessedname": "play", "guessedtype": "function"}, "pause": {"chainable": "", "description": "Pauses the tween", "guessedname": "pause", "guessedtype": "function"}, "stop": {"chainable": "", "description": "Stops the tween", "guessedname": "stop", "guessedtype": "function"}, "reverse": {"chainable": "", "description": "Reverses the tween", "guessedname": "reverse", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "function", "shortname": "Tween", "configs": {"node": {"guessedtype": "property", "required": "", "description": "The node that will be animated", "guessedname": "node", "writeonce": ""}, "from": {"type": "Object", "description": "an object literal with properties that will be animated", "guessedname": "from", "guessedtype": "property"}, "to": {"type": "Object", "description": "an object literal with the target properties for the animation", "guessedname": "to", "guessedtype": "property"}, "easingStrength": {"default": "2", "description": "The strength of the easing if applicable", "guessedname": "easingStrength", "guessedtype": "property"}, "duration": {"default": "1000", "type": "{String | Number} Allowd strings: \"fast\", \"slow\", \"normal\". Numbers are milliseconds", "description": "The duration of the animation", "guessedname": "duration", "guessedtype": "property"}, "easing": {"default": "TimeFrame.easing.DEFAULT", "type": "TimeFrame.easing", "description": "The easing used by the animation", "guessedname": "easing", "guessedtype": "property"}}, "description": "A Tween is a variation of a property during a lapse of time that has a certain easing associated"}, "SimpleDialog": {"name": "SimpleDialog", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A SimpleDialog is a Panel with simple form options and a button row instead of the footer"}], "namespace": "", "module": "container", "guessedname": "SimpleDialog", "extends": "Panel", "superclass": "Panel", "file": "container.js", "guessedtype": "function", "shortname": "SimpleDialog", "configs": {"buttons": {"type": "Array", "description": "An array of configuration objects for the Button class", "guessedname": "buttons", "guessedtype": "property"}}, "description": "A SimpleDialog is a Panel with simple form options and a button row instead of the footer"}, "DataSource": {"name": "DataSource", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Base class for all data sources. The DataSource class shouldn't be used directly"}], "namespace": "", "methods": {"sendRequest": {"chainable": "", "params": [{"type": "Object", "name": "request", "description": ""}, {"type": "Boolean", "name": "ignoreCache", "description": ""}], "description": "Sends a request", "guessedname": "sendRequest", "guessedtype": "function"}, "onBeforeParse": {"chainable": "", "params": [{"type": "Function", "name": "callback", "description": ""}], "description": "Adds an event listener to the \"beforeParse\" event", "guessedname": "onBeforeParse", "guessedtype": "function"}}, "module": "datasource", "guessedname": "DataSource", "protected": "", "extends": "Utility", "superclass": "Utility", "file": "datasource.js", "guessedtype": "function", "shortname": "DataSource", "configs": {"recordSet": {"readonly": "", "type": "RecordSet", "description": "This datasource's associated recordset", "guessedname": "recordSet", "guessedtype": "property"}, "responseType": {"required": "", "description": "The expected response type ('xml', 'jsarray', 'json', 'text')", "guessedname": "responseType", "guessedtype": "property"}, "requestLogic": {"guessedtype": "property", "protected": "", "description": "The logic for the chosen source type. Should only be usef when extending the DataSource class", "guessedname": "requestLogic", "writeonce": ""}, "responseSchema": {"required": "", "description": "The schema by which to parse the response data", "guessedname": "responseSchema", "guessedtype": "property"}}, "description": "Base class for all data sources. The DataSource class shouldn't be used directly"}, "DataSource.Local": {"name": "DataSource.Local", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A Local DataSource uses local variables"}], "namespace": "DataSource", "module": "datasource", "guessedname": "Local", "extends": "DataSource", "superclass": "DataSource", "file": "datasource.js", "guessedtype": "function", "shortname": "Local", "description": "A Local DataSource uses local variables"}, "Vector.Line": {"name": "Vector.Line", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A line vector"}], "namespace": "Vector", "module": "vector", "guessedname": "Line", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "function", "shortname": "Line", "description": "A line vector"}, "VectorView": {"name": "VectorView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A canvas for Vectors"}], "namespace": "", "module": "vector", "guessedname": "VectorView", "extends": "TimeFrame", "superclass": "TimeFrame", "file": "vector.js", "guessedtype": "function", "shortname": "VectorView", "description": "A canvas for Vectors"}, "utils.Mouse": {"name": "utils.Mouse", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A utility for tracking the mouse movement without crashing the browser rendering engine.\r\nAlso allows for moving the mouse over iframes and other pesky elements"}], "namespace": "utils", "module": "base", "events": {"move": {"description": "Fires not when the mouse moves, but in an interval defined by the frequency attribute\r\nThis way you can track the mouse position without breakin the browser's rendering engine\r\nbecause the native mousemove event fires too quickly"}, "up": {"description": "Fires when the mouse button is released"}}, "guessedname": "Mouse", "methods": {"enable": {"chainable": "", "description": "Enables the button", "guessedname": "enable", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Fires the focus event and sets the button as active", "guessedname": "focus", "guessedtype": "function"}, "up": {"chainable": "", "description": "Stop tracking. Equivalent to setting the tracking attribute to false\r\nSimulates the mouseup event", "guessedname": "up", "guessedtype": "function"}, "down": {"chainable": "", "description": "Start tracking. Equivalent to setting the tracking attribute to true.\r\nSimulates the mousedown event", "guessedname": "down", "guessedtype": "function"}, "disable": {"chainable": "", "description": "Disables the button", "guessedname": "disable", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Fires the blur event", "guessedname": "blur", "guessedtype": "function"}}, "extends": "Utility", "superclass": "Utility", "file": "base.js", "guessedtype": "function", "shortname": "Mouse", "configs": {"frequency": {"default": "20 (ms)", "type": "Number", "description": "Frequency at which the tracker updates", "guessedname": "myself", "guessedtype": "property"}, "tracking": {"default": "false", "type": "Boolean", "description": "Tracking status. Set it to true to start tracking"}}, "description": "A utility for tracking the mouse movement without crashing the browser rendering engine.\r\nAlso allows for moving the mouse over iframes and other pesky elements"}, "Node": {"name": "Node", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A node in a TreeView"}], "namespace": "", "module": "treeview", "events": {"click": {"description": "Fires when a label or node control is clicked"}}, "guessedname": "Node", "methods": {"toggle": {"chainable": "", "description": "Toggle this node", "guessedname": "toggle", "guessedtype": "function"}, "collapse": {"chainable": "", "description": "Collapse this node", "guessedname": "collapse", "guessedtype": "function"}, "expand": {"chainable": "", "description": "Expand this node", "guessedname": "expand", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "treeview.js", "guessedtype": "function", "shortname": "Node", "configs": {"parent": {"type": "Node", "description": "A pointer to this node's parent", "guessedname": "parent", "guessedtype": "property"}, "title": {"type": "String", "description": "Title attribute for the node"}, "expanded": {"default": "false", "type": "Boolean", "description": "The expanded status of this node", "guessedname": "expanded", "guessedtype": "property"}, "editable": {"default": "false", "type": "Boolean", "description": "Makes the node editable"}, "label": {"description": "", "guessedname": "label", "guessedtype": "property"}, "treeview": {"description": "A reference to this node's owner treeview", "writeonce": "", "required": "", "guessedname": "treeview", "guessedtype": "property", "type": "TreeView"}, "type": {"default": "\"text\"", "description": "Type of the node. Available types are 'text'", "guessedname": "type", "guessedtype": "property"}, "children": {"type": "Array", "description": "This node's children", "guessedname": "children", "guessedtype": "property"}}, "description": "A node in a TreeView"}, "Core": {"name": "Core", "namespace": "", "module": "jet", "methods": {"$": {"return": {"type": "NodeList", "description": ""}, "params": [{"type": "String|HTMLElement|Array", "name": "query", "description": ""}, {"type": "HTMLElement|Document", "name": "root", "description": ""}], "description": "The global object is a finder method that finds HTML elements.\r\nThe query string allows for different simple searches: \"#foo\" (get elemnet by id), \".foo\" (gets elements by class), \"foo\" (get elements by tag) or an array of html elements\r\nFor more complex queries, take a look at the Sizzle module"}, "extend": {"params": [{"type": "Function", "name": "r", "description": "\tthe object to modify"}, {"type": "Function", "name": "s", "description": "\tthe object to inherit"}, {"type": "Object", "name": "[px]", "description": "\tprototype properties to add/override"}, {"type": "Object", "name": "[sx]", "description": "\tstatic properties to add/override"}], "description": "From the guys at YUI (Thanks! This function is GENIUS!)\r\nUtility to set up the prototype, constructor and superclass properties to\r\nsupport an inheritance strategy that can chain constructors and methods.\r\nStatic members will not be inherited.", "guessedname": "extend", "guessedtype": "function"}, "walkTheDOM": {"params": [{"type": "HTMLElement", "name": "node", "description": ""}, {"type": "Function", "name": "fn", "description": ""}], "description": "Walks through the DOM tree starting in th branch that derives from node", "guessedname": "walkTheDOM", "guessedtype": "function"}, "toObj": {"guessedname": "toObj", "params": [{"type": "Object", "name": "o", "description": ""}], "description": "Object function by Douglas Crockford\r\n<a href=\"https://docs.google.com/viewer?url=http://javascript.crockford.com/hackday.ppt&pli=1\">link</a>", "private": "", "guessedtype": "function"}, "mix": {"params": [{"type": "Object", "name": "A", "description": ""}, {"type": "Object", "name": "B", "description": ""}, {"type": "Boolean", "name": "[overwrite]", "description": ""}], "description": "Copies all properties from B to A.\r\nDoesn't overwrite properties unless the overwrite parameter is true", "guessedname": "mix", "guessedtype": "property"}, "add": {"params": [{"type": "Hash", "name": "key/value", "description": " pairs of class/function names and definitions"}], "description": "Adds properties to the $ object (shortcut for adding classes)", "guessedname": "add", "guessedtype": "property"}, "parseQuery": {"protected": "", "params": [{"type": "String", "name": "query", "description": ""}, {"type": "HTMLElement|Document", "name": "root", "description": ""}], "description": "Does all the work behind the $() function\r\nYou shouldn't overwrite it unless you know what you're doing", "guessedname": "parseQuery", "guessedtype": "function"}}, "static": "", "file": "jet.js", "shortname": "Core", "properties": {"win": {"description": "A pointer to the last Windo that was referenced by the $() function", "guessedname": "win", "guessedtype": "property"}, "context": {"description": "A pointer to the last Document that was referenced by the $() function.", "guessedname": "context", "guessedtype": "property"}}, "description": "Core methods"}, "Widget": {"name": "Widget", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Base class for all widgets. \r\nProvides show, hide, render and destroy methods, the rendering process logic\r\nand basic attributes shared by all widgets"}], "namespace": "", "module": "base", "events": {"afterRender": {"description": "Fires after the render process is finished"}, "render": {"see": "Widget.render()", "description": "Render event. Preventing the default behavior will stop the rendering process"}, "destroy": {"description": "Preventing the default behavior will stop the destroy process"}}, "guessedname": "Widget", "methods": {"destroy": {"description": "Destroys the widget by removing the elements from the dom and cleaning all event listeners", "guessedname": "destroy", "guessedtype": "function"}, "hide": {"chainable": "", "description": "Hides the widget", "guessedname": "hide", "guessedtype": "function"}, "render": {"chainable": "", "params": [{"type": "NodeList|HTMLElement", "name": "target", "description": ""}], "description": "Starts the rendering process. The rendering process is based on custom events.\r\nThe widget class fires a \"render\" event to which all subclasses must subscribe.\r\nThis way all listeners are fired in the order of the inheritance chain. ie:\r\nIn the Overlay class, the render process is:\r\n<code>render() method -> Module listener -> Overlay listener -> rest of the render() method (appends the boundingBox to the srcNode)</code>\r\nThis helps use an easy pattern of OOP CSS: each subclass adds a CSS class name to the boundingBox,\r\nfor example resulting in <div class=\"jet-module jet-overlay jet-panel\"></div>. That way\r\na panel can inherit css properties from module and overlay.", "guessedname": "render", "guessedtype": "function"}, "show": {"chainable": "", "description": "Shows the widget", "guessedname": "show", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "base.js", "guessedtype": "function", "shortname": "Widget", "configs": {"className": {"default": "\"widget\"", "description": "The class name applied along with the prefix to the boundingBox", "guessedname": "className", "guessedtype": "property"}, "srcNode": {"type": "DOMNode | NodeList", "description": "The node to which the widget will be appended to. May be set as a \r\nconfiguration attribute, with a setter or as the first parameter of the render() method", "guessedname": "srcNode", "guessedtype": "property"}, "boundingBox": {"default": "<div/>", "type": "NodeList", "description": "The bounding box contains all the parts of the widget", "writeonce": ""}, "rendered": {"default": "false", "guessedtype": "property", "description": "Rendered status. Shouldn't be changed by anything appart from the Widget.render() method", "guessedname": "rendered", "writeonce": ""}, "classPrefix": {"default": "\"yui-\"", "description": "Prefix for all CSS clases. Useful for renaming the project", "guessedname": "classPrefix", "guessedtype": "property"}}, "description": "Base class for all widgets. \r\nProvides show, hide, render and destroy methods, the rendering process logic\r\nand basic attributes shared by all widgets"}, "Hash": {"name": "Hash", "namespace": "", "module": "jet", "guessedname": "Hash", "methods": {"keys": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Hash", "name": "hash", "description": ""}], "description": "Returns an array with all the keys of a hash", "guessedname": "keys", "guessedtype": "function"}, "loadScript": {"guessedname": "loadScript", "params": [{"type": "String", "name": "url", "description": ""}], "description": "Dinamically inserts a script before the first script it finds on the page (at least the one executing this)\r\nIt loads scripts asynchronously, so it doesn't lock the browser and the loaded scripts can't use document.write()", "private": "", "guessedtype": "function"}, "values": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Object", "name": "hash", "description": ""}], "description": "Returns an array with all the valus of a hash", "guessedname": "values", "guessedtype": "function"}, "each": {"params": [{"type": "Hash", "name": "hash", "description": ""}, {"type": "Function", "name": "fn", "description": ""}, {"type": "Object", "name": "[thisp]", "description": " Sets the value of the this keyword"}], "description": "Iterats through a hash", "guessedname": "each", "guessedtype": "function"}}, "static": "", "file": "jet.js", "guessedtype": "property", "shortname": "Hash", "description": "Utilities for working with object literals\r\nThroughout jet the Hash type means an object lieteral"}, "jet": {"name": "jet", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal with configuration options"}], "description": "<p>Global function. Returns an object with 2 methods: use() and add().</p>\r\n<code>jet().use(\"node\", function ($) {\r\n//do something with $\r\n});</code>\r\n<p>This snippet will load the Node module, and when it finishes loading it'll execute\r\nthe function. Each module must call the jet().add() method to tell the loader\r\nit has finished loading:</p>\r\n<code>jet().add(\"node\", function ($) {\r\n$.method = function () {};\r\n});</code>\r\n<p>A variable is passed to every module and the function defined in the use() method. \r\nThis variable acts as a main library and is shared by each module and the main\r\nfunction, but not between different calls to the \"use\" method. Ie:</p>\r\n<code>jet().use(\"node\", function ($) {\r\n$.testProperty = \"test\";\r\n});\r\njet().use(\"node\", function ($) {\r\nalert($.testProperty); //alerts \"undefined\"\r\n});</code>\r\n<p>Since it is a parameter, it can have any name but it still acts the same way. Also,\r\neach module is called in the order defined by the \"use\" method. So:</p>\r\n<code>jet().use(\"node\", \"anim\", function (L) {\r\n// Here the L variable contains both Node and Anim\r\n// The Node module is called first on L and the Anim module after,\r\n// so it can overwrite anything Node did, extend classes, etc\r\n});</code>\r\n<p>New modules can be defined by passing an object literal instead of a string to the\r\n\"use\" method with a \"name\" property and a \"path\" or \"fullpath\" property.</p> \r\n<code>jet().use(\"node\", {name:\"myModule\", fullpath:\"http://localhost/myModule.js\"}, function ($) {\r\n//do something\r\n});</code>\r\n<p>If \"path\" is defined instead of \"fullpath\", the loader will append \"path\"\r\nto a predefined base URL. This base URL can be modified by passing\r\nthe jet() function an object literal with a \"base\" property:</p>\r\n<code>jet({\r\nbase: \"http://www.mydomain.com/modules/\"\r\n}).use(\"node\", function ($) {\r\n//in this case the \"core\" module is loaded from http://www.mydomain.com/modules/node.min.js\r\n});</code>"}], "namespace": "", "module": "jet", "guessedname": "jet", "methods": {"use": {"description": "Allows to load modules and obtain a unique reference to the library augmented by the requested modules \r\nThis method works by overloading its parameters. It takes names (String) of predefined modules\r\nor objects defining name and path/fullpath of a module. The last parameter must be a function \r\nthat contains the main logic of the application.", "guessedname": "use", "guessedtype": "function"}, "add": {"params": [{"type": "String", "name": "moduleName", "description": ""}, {"type": "Function", "name": "expose", "description": ""}], "description": "Adds a module to the loaded module list and calls update() to check if a queue is ready to fire\r\nThis method must be called from a module to register it", "guessedname": "add", "guessedtype": "function"}}, "file": "jet.js", "guessedtype": "function", "shortname": "jet", "configs": {"base": {"default": "\"//jet-js.googlecode.com/svn/trunk/src/\"", "type": "String", "description": "prefix for all script and css urls", "guessedname": "minify", "guessedtype": "property"}, "modules": {"type": "Array", "description": "Allows to define your own modules. Currently the same as using object literals in the use() method", "guessedname": "predef", "guessedtype": "property"}, "loadCss": {"default": "true", "type": "Boolean", "description": "If true, css modules are loaded", "guessedname": "loadCss", "guessedtype": "property"}}, "description": "<p>Global function. Returns an object with 2 methods: use() and add().</p>\r\n<code>jet().use(\"node\", function ($) {\r\n//do something with $\r\n});</code>\r\n<p>This snippet will load the Node module, and when it finishes loading it'll execute\r\nthe function. Each module must call the jet().add() method to tell the loader\r\nit has finished loading:</p>\r\n<code>jet().add(\"node\", function ($) {\r\n$.method = function () {};\r\n});</code>\r\n<p>A variable is passed to every module and the function defined in the use() method. \r\nThis variable acts as a main library and is shared by each module and the main\r\nfunction, but not between different calls to the \"use\" method. Ie:</p>\r\n<code>jet().use(\"node\", function ($) {\r\n$.testProperty = \"test\";\r\n});\r\njet().use(\"node\", function ($) {\r\nalert($.testProperty); //alerts \"undefined\"\r\n});</code>\r\n<p>Since it is a parameter, it can have any name but it still acts the same way. Also,\r\neach module is called in the order defined by the \"use\" method. So:</p>\r\n<code>jet().use(\"node\", \"anim\", function (L) {\r\n// Here the L variable contains both Node and Anim\r\n// The Node module is called first on L and the Anim module after,\r\n// so it can overwrite anything Node did, extend classes, etc\r\n});</code>\r\n<p>New modules can be defined by passing an object literal instead of a string to the\r\n\"use\" method with a \"name\" property and a \"path\" or \"fullpath\" property.</p> \r\n<code>jet().use(\"node\", {name:\"myModule\", fullpath:\"http://localhost/myModule.js\"}, function ($) {\r\n//do something\r\n});</code>\r\n<p>If \"path\" is defined instead of \"fullpath\", the loader will append \"path\"\r\nto a predefined base URL. This base URL can be modified by passing\r\nthe jet() function an object literal with a \"base\" property:</p>\r\n<code>jet({\r\nbase: \"http://www.mydomain.com/modules/\"\r\n}).use(\"node\", function ($) {\r\n//in this case the \"core\" module is loaded from http://www.mydomain.com/modules/node.min.js\r\n});</code>"}, "DataSource.Get": {"name": "DataSource.Get", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A Get DataSource that uses JSON for getting data across domains"}], "namespace": "DataSource", "module": "datasource", "guessedname": "Get", "extends": "DataSource", "superclass": "DataSource", "file": "datasource.js", "guessedtype": "function", "shortname": "Get", "description": "A Get DataSource that uses JSON for getting data across domains"}, "Vector.Rectangle": {"name": "Vector.Rectangle", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draws a rectangle"}], "namespace": "Vector", "module": "vector", "guessedname": "Rectangle", "methods": {"rotate": {"chainable": "", "params": [{"type": "Number", "name": "angle", "description": " Angle between 0 and 360"}], "description": "Rotates the rectangle", "guessedname": "rotate", "guessedtype": "function"}}, "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "function", "shortname": "Rectangle", "description": "Draws a rectangle"}, "ComboBox": {"name": "ComboBox", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A ComboBox is a select html element"}], "namespace": "", "module": "button", "guessedname": "ComboBox", "methods": {"add": {"chainable": "", "params": [{"type": "String | Hash", "name": "The", "description": " text value of the option, or alternatively \r\na hash which key is the text and the value is the option's value"}, {"type": "String", "name": "value", "description": " optional - The value of the option"}], "description": "Adds options to the combo box", "guessedname": "add", "guessedtype": "function"}, "clear": {"chainable": "", "description": "Removes all options from the combo box", "guessedname": "clear", "guessedtype": "function"}, "fill": {"chainable": "", "params": [{"type": "Array", "name": "values", "description": " An array of text values that behave like the \"text\" parameter of the add() method"}], "description": "Adds several options to the select", "guessedname": "fill", "guessedtype": "function"}}, "extends": "Button", "superclass": "Button", "file": "button.js", "guessedtype": "function", "shortname": "ComboBox", "description": "A ComboBox is a select html element"}, "DOM": {"name": "DOM", "namespace": "", "module": "node", "guessedname": "DOM", "methods": {"scrollTop": {"chainable": "", "params": [{"type": "Number", "name": "value", "description": ""}], "description": "Gets the scrolling height or makes the browser scroll", "guessedname": "scrollTop", "guessedtype": "function"}, "scrollLeft": {"chainable": "", "params": [{"type": "Number", "name": "value", "description": ""}], "description": "Gets the scrolling width or makes the browser scroll", "guessedname": "scrollLeft", "guessedtype": "function"}, "getWindowFromDocument": {"params": [{"type": "Document", "name": "document", "description": ""}], "description": "Returns the window object to which the current document belongs", "guessedname": "getWindowFromDocument", "guessedtype": "function"}, "screenSize": {"description": "Returns the inner size of the screen", "guessedname": "screenSize", "guessedtype": "function"}}, "static": "", "file": "node.js", "guessedtype": "property", "shortname": "DOM", "description": "Bla"}, "JSON": {"name": "JSON", "namespace": "", "module": "json", "methods": {"parse": {"params": [{"type": "String", "name": "json", "description": " string"}], "description": "Takes a string and parses it into an object literal"}, "stringify": {"params": [{"type": "Object", "name": "an", "description": " object literal"}], "description": "Takes an object literal and serialices it into a string"}}, "static": "", "file": "json.js", "shortname": "JSON", "description": "JSON parsing"}, "Drag": {"name": "Drag", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Makes an element draggable"}], "namespace": "", "module": "dragdrop", "events": {"drag": {"description": "Fires during the drag movement"}, "drag:start": {"description": "First when the dragging starts"}, "drag:end": {"description": "Fires when the drag ends"}}, "guessedname": "Drag", "methods": {"addHandler": {"description": "Adds a handler to the handler list", "chainable": "", "params": [{"type": "HTMLElement | NodeList", "name": "handler", "description": ""}], "guessedname": "addHandler", "guessedtype": "function", "mehtod": "addHandler"}}, "extends": "Base", "superclass": "Base", "file": "dragdrop.js", "guessedtype": "function", "shortname": "Drag", "configs": {"node": {"required": "", "description": "node to be dragged", "guessedname": "node", "guessedtype": "property"}, "cursor": {"type": "String", "description": "the type of cursor that will be shown on hover", "guessedname": "cursor", "guessedtype": "property"}, "tracking": {"type": "Boolean", "description": "the tracking status", "guessedname": "tracking", "guessedtype": "property"}, "handlers": {"type": "Array | NodeList", "description": "A list of elements that will start the dragging"}}, "description": "Makes an element draggable"}, "Base": {"name": "Base", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Base class for all widgets and utilities."}], "namespace": "", "module": "base", "extends": "Attribute", "superclass": "Attribute", "file": "base.js", "shortname": "Base", "configs": {"on": {"description": "Allows quick setting of custom events in the constructor", "guessedname": "myself", "guessedtype": "property"}}, "description": "Base class for all widgets and utilities."}, "Cookie": {"name": "Cookie", "namespace": "", "module": "cookie", "guessedname": "cookie", "methods": {"set": {"chainable": "", "params": [{"type": "String", "name": "name", "description": ""}, {"type": "String", "name": "value", "description": ""}, {"type": "Number", "name": "optional", "description": " - duration of the variable in days"}], "description": "Sets the value of a cookie variable", "guessedname": "set", "guessedtype": "function"}, "isSet": {"params": [{"type": "String", "name": "name", "description": ""}], "description": "Returns whether a cookir variable is set", "guessedname": "isSet", "guessedtype": "function"}, "unset": {"chainable": "", "params": [{"type": "String", "name": "name", "description": ""}], "description": "Removes a cookie", "guessedname": "unset", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "name", "description": ""}], "description": "Get the value of a cookie", "guessedname": "get", "guessedtype": "function"}}, "static": "", "file": "cookie.js", "guessedtype": "property", "shortname": "Cookie", "description": "Provides abstracion for easier use of cookies"}, "DragDrop": {"name": "DragDrop", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "DragDrop class"}], "namespace": "", "module": "dragdrop", "guessedname": "DragDrop", "methods": {"addTarget": {"chainable": "", "params": [{"type": "HTMLElement | NodeList", "name": "target", "description": ""}], "description": "Adds a drop target", "guessedname": "addTarget", "guessedtype": "function"}}, "extends": "Drag", "superclass": "Drag", "file": "dragdrop.js", "guessedtype": "function", "shortname": "DragDrop", "events": {"drop:miss": {"description": "Fires when a draggable object is release but not over any target"}, "drop:hit": {"description": "Fires when a draggable object is drop into a target"}}, "description": "DragDrop class"}, "TimeFrame": {"name": "TimeFrame", "namespace": "", "module": "anim", "guessedname": "TimeFrame", "methods": {"play": {"chainable": "", "description": "Starts the playback", "guessedname": "play", "guessedtype": "function"}, "stop": {"chainable": "", "description": "Stops the playback", "guessedname": "stop", "guessedtype": "function"}, "addTween": {"chainable": "", "params": [{"type": "Tween", "name": "tween", "description": ""}], "description": "Adds a Tween to the queue", "guessedname": "addTween", "guessedtype": "function"}, "removeTween": {"chainable": "", "params": [{"type": "Tween", "name": "tween", "description": ""}], "description": "Removes a Tween from the queue", "guessedname": "removeTween", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "anim.js", "guessedtype": "function", "static": "", "shortname": "TimeFrame", "properties": {"fps": {"default": "35", "description": "Refresh speed in frames per second.\r\nCan't be changed during playback", "guessedname": "fps", "guessedtype": "property"}}, "description": "A time frame for queueing animations"}, "Vector.Image": {"name": "Vector.Image", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "An Image vector"}], "namespace": "Vector", "module": "vector", "guessedname": "ImageVector", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "function", "shortname": "Image", "description": "An Image vector"}, "TreeView": {"name": "TreeView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A labeled tree"}], "namespace": "", "module": "treeview", "events": {"node:expand": {"params": [{"type": "Node", "name": "The", "description": " node that initiated the action"}], "description": "Fires when a node is expanded. Preventing the default behavior will\r\nstop the node from expanding"}, "node:collapse": {"params": [{"type": "Node", "name": "The", "description": " node that initiated the action"}], "description": "Fires when a node is collapsed. Preventing the default behavior will\r\nstop the node from collapsing"}}, "guessedname": "TreeView", "extends": "Widget", "superclass": "Widget", "file": "treeview.js", "guessedtype": "function", "shortname": "TreeView", "configs": {"branches": {"required": "", "type": "Array", "description": "An array containing the data to populate the tree", "guessedname": "branches", "guessedtype": "property"}}, "description": "A labeled tree"}, "Resize": {"name": "Resize", "namespace": "", "module": "resize", "properties": {"reposition": {"ocnfig": "reposition", "description": "If set to true, the resize utility will automatically change the position of the \r\nnode so that is stays in place when resizing it in any direction", "default": "false", "guessedname": "reposition", "guessedtype": "property", "type": "Boolean"}, "handles": {"default": "[\"b\", \"r\", \"br\"]", "type": "Array", "description": "qconfig handles", "guessedname": "handles", "guessedtype": "property"}}, "guessedname": "Resize", "methods": {"lock": {"chainable": "", "description": "Makes the handles non interactive", "guessedname": "lock", "guessedtype": "function"}, "unlock": {"chainable": "", "description": "Makes the handles interactive", "guessedname": "unlock", "guessedtype": "function"}, "stop": {"chainable": "", "description": "Makes the resize action end prematurely", "guessedname": "stop", "guessedtype": "function"}}, "extends": "Utility", "superclass": "Utility", "file": "resize.js", "guessedtype": "function", "events": {"endResize": {"description": "Fires when the resize action ends"}, "beforeResize": {"params": [{"type": "Number", "name": "currentWith", "description": ""}, {"type": "Number", "name": "currentHeight", "description": ""}, {"type": "Number", "name": "offsetLeft", "description": ""}, {"type": "Number", "name": "offsetTop", "description": ""}], "description": "Fires before the resize action starts. If prevented, the resize action doesn't start"}, "resize": {"params": [{"type": "Number", "name": "currentWith", "description": ""}, {"type": "Number", "name": "currentHeight", "description": ""}, {"type": "Number", "name": "offsetLeft", "description": ""}, {"type": "Number", "name": "offsetTop", "description": ""}], "description": "Fires during the resize action"}}, "shortname": "Resize", "param": "{Object} config Object literal specifying configuration properties", "configs": {"node": {"required": "", "description": "The node to be resized", "guessedname": "node", "guessedtype": "property"}, "hiddenHandles": {"default": "false", "type": "Boolean", "description": "If set to true, the handles are interactive but invisible", "guessedname": "hiddenHandles", "guessedtype": "property"}, "shim": {"default": "false", "type": "Boolean", "description": "Uses invisible elements to be able to resize the node over iframes", "guessedname": "shim", "guessedtype": "property"}, "minHeight": {"default": "0", "type": "Number", "description": "The minimum height the node can achieve", "guessedname": "minHeight", "guessedtype": "property"}, "minWidth": {"default": "0", "type": "Number", "description": "The minimum with the node can achieve", "guessedname": "minWidth", "guessedtype": "property"}, "proxy": {"default": "false", "type": "Boolean | String", "description": "Whether to use a copy of the node while resizing or not.\r\nPossible values: false, true, \"clone\"", "guessedname": "proxy", "guessedtype": "property"}, "locked": {"default": "false", "type": "Boolean", "description": "If the resize is locked the handles are not interactive", "guessedname": "locked", "guessedtype": "property"}, "constrain": {"default": "false", "type": "Boolean", "description": "If set to true, the node can't become bigger than the screen", "guessedname": "constrain", "guessedtype": "property"}, "animate": {"default": "false", "type": "Boolean", "description": "Creates an animation when the resize handle is released. Can only be set to true\r\nif \"proxy\" is set to true. <strong>Requires the Anim module.</strong>", "guessedname": "animate", "guessedtype": "property"}}, "description": "Provides a utility for resizing elements"}, "Panel": {"name": "Panel", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A panel is an overlay that resembles an OS window without actually being one,\r\nto the problems they have (stop javascript execution, etc)"}], "namespace": "", "module": "container", "guessedname": "Panel", "extends": "Overlay", "superclass": "Overlay", "file": "container.js", "guessedtype": "function", "shortname": "Panel", "configs": {"underlay": {"readonly": "", "description": "The underlay is inserted after the contentBox to allow for a more complex design", "guessedname": "underlay", "guessedtype": "property"}, "shadow": {"default": "true", "description": "If true, the panel shows a shadow", "guessedname": "shadow", "guessedtype": "property"}, "contentBox": {"readonly": "", "description": "A panel uses another container inside the boundingBox \r\nin order to have a more complex design (ie: shadow)", "guessedname": "contentBox", "guessedtype": "property"}, "close": {"default": "true", "type": "Boolean", "description": "If true, a close button is added to the panel that hides it when clicked"}}, "description": "A panel is an overlay that resembles an OS window without actually being one,\r\nto the problems they have (stop javascript execution, etc)"}, "Lang": {"name": "Lang", "description": "Provides utility methods for finding object types and other\r\nmethods that javascript provides in some browsers but not in others such as trim()", "namespace": "", "module": "jet", "guessedname": "Lang", "static": "", "file": "jet.js", "guessedtype": "function", "shortname": "Lang", "methods": {"isArray": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is an array", "guessedname": "isArray", "guessedtype": "function"}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "params": [{"type": "String", "name": "the", "description": " string to trim"}], "description": "Returns a string without any leading or trailing whitespace.\r\nCode by Steven Levithan\r\nhttp://blog.stevenlevithan.com/archives/faster-trim-javascript"}, "isRecordSet": {"description": "Returns whether an object is a RecordSet", "guessedname": "isRecordSet", "guessedtype": "function"}, "isString": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is a string", "guessedname": "isString", "guessedtype": "function"}, "isBoolean": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is a boolean", "guessedname": "isBoolean", "guessedtype": "function"}, "isRecord": {"description": "Returns if an object is a Record", "guessedname": "isRecord", "guessedtype": "function"}, "isNative": {"params": [{"type": "Function", "name": "o", "description": ""}], "description": "Returns whether the function is a native function or not", "guessedname": "isNative", "guessedtype": "property"}, "clone": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Clones an object, returning a copy with the sames properties", "guessedname": "clone", "guessedtype": "function"}, "random": {"params": [{"type": "Number", "name": "num", "description": ""}], "description": "A more traditional random function. Returns a random integer between 0 and num-1", "guessedname": "random", "guessedtype": "function"}, "isHash": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is an object literal", "guessedname": "isHash", "guessedtype": "function"}, "isValue": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns false if o is undefined, null, NaN or Infinity. In any other case, return true", "guessedname": "isValue", "guessedtype": "function"}, "isFunction": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is a function", "guessedname": "isFunction", "guessedtype": "function"}, "isNumber": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is a number", "guessedname": "isNumber", "guessedtype": "function"}, "type": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns the type of the object", "guessedname": "type", "guessedtype": "property"}, "isUndefined": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is undefined", "guessedname": "isUndefined", "guessedtype": "function"}}}, "DataSource.Ajax": {"name": "DataSource.Ajax", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "An AJAX DataSource"}], "namespace": "DataSource", "module": "datasource", "guessedname": "Ajax", "extends": "DataSource", "superclass": "DataSource", "file": "datasource.js", "guessedtype": "function", "shortname": "Ajax", "description": "An AJAX DataSource"}, "Vector.Path": {"name": "Vector.Path", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "An Path vector"}], "namespace": "Vector", "module": "vector", "guessedname": "Path", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "function", "shortname": "Path", "description": "An Path vector"}, "RecordSet": {"name": "RecordSet", "constructors": [{"params": [{"type": "Array", "name": "data", "description": " If data is passed, it is converted into several Records"}], "description": "A collections of Records"}], "namespace": "", "module": "datasource", "guessedname": "RecordSet", "methods": {"getRecords": {"description": "Returns all records in the set", "guessedname": "getRecords", "guessedtype": "function"}, "getCount": {"return": {"type": "", "description": "Number"}, "description": "Returns the number of records in the set", "guessedname": "getCount", "guessedtype": "function"}, "push": {"chainable": "", "params": [{"type": "Array", "name": "data", "description": ""}], "description": "Adds data to the set, creating new Records", "guessedname": "push", "guessedtype": "function"}, "sortBy": {"chainable": "", "params": [{"type": "String", "name": "key", "description": " The data key that will be sorted"}, {"type": "String", "name": "order", "description": " the order in which to sort. May be \"asc\" or \"desc\""}], "description": "Sorts the records based on a key of the data they hold", "guessedname": "sortBy", "guessedtype": "function"}, "replace": {"chainable": "", "params": [{"type": "Array", "name": "data", "description": ""}], "description": "Replaces all records with new data", "guessedname": "replace", "guessedtype": "function"}}, "file": "datasource.js", "guessedtype": "function", "shortname": "RecordSet", "description": "A collections of Records"}, "Button": {"name": "Button", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A button may be a push button, a radio button or other form elements that behave as buttons"}], "namespace": "", "module": "button", "guessedname": "Button", "extends": "Widget", "superclass": "Widget", "file": "button.js", "guessedtype": "function", "shortname": "Button", "configs": {"buttonNode": {"readonly": "", "description": "The button node"}, "type": {"default": "\"push\"", "guessedtype": "property", "type": "String", "guessedname": "type", "writeonce": ""}}, "description": "A button may be a push button, a radio button or other form elements that behave as buttons"}, "EventCache": {"name": "EventCache", "namespace": "", "module": "node", "guessedname": "EventCache", "methods": {"clear": {"params": [{"type": "DOMNode", "name": "obj", "description": ""}], "description": "Removes all listeners from a node", "guessedname": "clear", "guessedtype": "function"}, "add": {"params": [{"type": "DOMNode", "name": "obj", "description": ""}, {"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "fn", "description": ""}], "description": "Adds a listener to the cache", "guessedname": "add", "guessedtype": "function"}, "remove": {"params": [{"type": "DOMNode", "name": "obj", "description": ""}, {"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "fn", "description": ""}], "description": "Removes a method from the cache, but doesn't do anything to the node's listener", "guessedname": "remove", "guessedtype": "function"}, "flush": {"description": "Removes all listeners from all nodes recorded in the cache", "guessedname": "flush", "guessedtype": "function"}}, "static": "", "private": "", "file": "node.js", "guessedtype": "function", "shortname": "EventCache", "description": "Keeps a record of all listeners attached to the DOM in order to remove them when necessary"}, "EventTarget": {"name": "EventTarget", "constructors": [{"description": "<p>A class designed to be inherited or augmented into other classes and provide custom events.</p>\r\n<p>Custom events work by attaching event listeners to a class that augments or extends EventTarget.\r\nAn event listener can be a function or an object with a method called \"eventHandler\".\r\nIf it is a function, when fired the context will be the firing object. In the case of an object, the \r\ncontext will be the object itself.</p>\r\n<p>Attaching an object to the \"*\" event type allows for a different approach:</p>\r\n<code>\r\nsomeObj.handleEvent = function (e) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;switch (e.type) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case \"someEvent\":<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case \"otherEvent\":<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something else<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br/>\r\n};<br/>\r\neventProvider.on(\"*\", someObj);\r\n</code>"}], "namespace": "", "module": "base", "guessedname": "EventTarget", "methods": {"fire": {"params": [{"type": "String", "name": "eventType", "description": "\r\nExtra parameters will be passed to all event listeners"}], "description": "Fires an event, executing all its listeners", "guessedname": "fire", "guessedtype": "function"}, "on": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Adds an event listener", "guessedname": "on", "guessedtype": "function"}, "unbind": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Removes and event listener", "guessedname": "unbind", "guessedtype": "function"}, "unbindAll": {"chainable": "", "description": "Removes all event listeners of all types", "guessedname": "unbindAll", "guessedtype": "function"}}, "file": "base.js", "guessedtype": "function", "shortname": "EventTarget", "description": "<p>A class designed to be inherited or augmented into other classes and provide custom events.</p>\r\n<p>Custom events work by attaching event listeners to a class that augments or extends EventTarget.\r\nAn event listener can be a function or an object with a method called \"eventHandler\".\r\nIf it is a function, when fired the context will be the firing object. In the case of an object, the \r\ncontext will be the object itself.</p>\r\n<p>Attaching an object to the \"*\" event type allows for a different approach:</p>\r\n<code>\r\nsomeObj.handleEvent = function (e) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;switch (e.type) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case \"someEvent\":<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case \"otherEvent\":<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something else<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br/>\r\n};<br/>\r\neventProvider.on(\"*\", someObj);\r\n</code>"}, "Record": {"name": "Record", "constructors": [{"params": [{"type": "Object", "name": "An", "description": " object literal"}], "description": "A record is a Hash width a unique id"}], "namespace": "", "module": "datasource", "guessedname": "Record", "methods": {"getData": {"description": "Returns the data of the record. Must be an object literal", "guessedname": "getData", "guessedtype": "function"}, "getId": {"return": {"type": "", "description": "Number"}, "description": "Returns the id of the record. Each record has a unique id globally.alert\r\nThis allows for easy filtering, ordering, etc of records.alert", "guessedname": "getId", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "key", "description": ""}], "description": "Shortcut for getting a value from the record's data", "guessedname": "get", "guessedtype": "function"}}, "file": "datasource.js", "guessedtype": "function", "shortname": "Record", "description": "A record is a Hash width a unique id"}, "RadioButton": {"name": "RadioButton", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A RadioButton is actually a group of radio buttons that interact with each other"}], "namespace": "", "module": "button", "guessedname": "RadioButton", "extends": "Widget", "superclass": "Widget", "file": "button.js", "guessedtype": "function", "shortname": "RadioButton", "description": "A RadioButton is actually a group of radio buttons that interact with each other"}, "Vector": {"name": "Vector", "constructors": [{"params": [{"type": "Object", "name": "configuration", "description": " key/value pairs, as in the Attribute class"}], "description": "Basic Vector class\r\nA graphic represents a figure, an SVG element or its VML counterpart"}], "namespace": "", "module": "vector", "methods": {"on": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Adds an event listener to the vector node"}, "unbind": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Remove an event listeners from the vector node"}, "unbindAll": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}], "description": "Removes all event listeners of a certain type from the vector node"}, "colorHexToArray": {"return": {"type": "", "description": "Array"}, "description": "Takes a hex color and returns an array of three numbers between 0 and 255", "params": [{"type": "String", "name": "hexColor", "description": " Hex color string"}], "guessedname": "colorHexToArray", "guessedtype": "function", "final": ""}, "parseDec": {"final": "", "params": [{"type": "String", "name": "str", "description": " Decimal number candidate"}], "description": "Short for paseInt(str, 10). Doesn't fail if it isn't a number", "guessedname": "parseDec", "guessedtype": "function"}, "colorArrayToHex": {"return": {"type": "", "description": "String"}, "description": "Takes an array of three decimal colors and returns a hex color string", "params": [{"type": "Array", "name": "arr", "description": " Color array"}], "guessedname": "colorArrayToHex", "guessedtype": "function", "final": ""}, "decToHex": {"return": {"type": "", "description": "String"}, "description": "Transforms a decimal number into a hex string", "params": [{"type": "Number", "name": "dec", "description": " Decimal number"}], "guessedname": "decToHex", "guessedtype": "function", "final": ""}, "hexToDec": {"return": {"type": "", "description": "Number"}, "description": "Transforms a hext string into a decimal number", "params": [{"type": "String", "name": "hex", "description": " Hex string"}], "guessedname": "hexToDec", "guessedtype": "function", "final": ""}}, "extends": "Attribute", "superclass": "Attribute", "file": "vector.js", "shortname": "Vector", "configs": {"node": {"required": "", "type": "SVG/VML node", "description": "A pointer to the vector node", "writeonce": ""}, "width": {"description": "width"}}, "description": "Basic Vector class\r\nA graphic represents a figure, an SVG element or its VML counterpart"}, "Vector.Circle": {"name": "Vector.Circle", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A circle vector"}], "namespace": "Vector", "module": "vector", "guessedname": "Circle", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "function", "shortname": "Circle", "description": "A circle vector"}, "IO": {"name": "IO", "description": "Handles AJAX requests", "namespace": "", "module": "io", "guessedname": "IO", "static": "", "file": "io.js", "guessedtype": "property", "shortname": "IO", "methods": {"ajax": {"params": [{"type": "Hash", "name": "settings", "description": ""}], "description": "Makes an ajax request", "guessedname": "ajax", "guessedtype": "function"}, "xsl": {"params": [{"type": "Hash", "name": "settings", "description": ""}], "description": "Makes a XSL transformation. Loads the files with Ajax if needed. <strong>Requires the io-xsl submodule</strong>", "guessedname": "xsl", "guessedtype": "function"}, "flajax": {"params": [{"type": "Hash", "name": "settings", "description": ""}], "description": "Makes a cross-domain ajax call based on a Flash engine. <strong>Requires the io-xsl submodule</strong>", "guessedname": "flajax", "guessedtype": "function"}}}, "Easing": {"name": "Easing", "namespace": "", "module": "anim", "guessedname": "Easing", "methods": {"easein": {"params": [{"type": "Number", "name": "x", "description": " The time variable"}, {"type": "Number", "name": "y0", "description": " The start value of the property that will be changed"}, {"type": "Number", "name": "yf", "description": " The final value of the property that will be changed"}, {"type": "Number", "name": "dur", "description": " Duration of the animation"}, {"type": "Number", "name": "pw", "description": " Easing strengh"}], "description": "An easing that's stronger at the beginning and softer at the end", "guessedname": "easein", "guessedtype": "function"}, "linear": {"params": [{"type": "Number", "name": "x", "description": " The time variable"}, {"type": "Number", "name": "y0", "description": " The start value of the property that will be changed"}, {"type": "Number", "name": "yf", "description": " The final value of the property that will be changed"}, {"type": "Number", "name": "dur", "description": " Duration of the animation"}], "description": "Linear easing", "guessedname": "linear", "guessedtype": "function"}, "sling": {"params": [{"type": "Number", "name": "x", "description": " The time variable"}, {"type": "Number", "name": "y0", "description": " The start value of the property that will be changed"}, {"type": "Number", "name": "yf", "description": " The final value of the property that will be changed"}, {"type": "Number", "name": "dur", "description": " Duration of the animation"}, {"type": "Number", "name": "pw", "description": " Easing strengh"}], "description": "An easing that goes back before going forward", "guessedname": "sling", "guessedtype": "function"}, "easeout": {"params": [{"type": "Number", "name": "x", "description": " The time variable"}, {"type": "Number", "name": "y0", "description": " The start value of the property that will be changed"}, {"type": "Number", "name": "yf", "description": " The final value of the property that will be changed"}, {"type": "Number", "name": "dur", "description": " Duration of the animation"}, {"type": "Number", "name": "pw", "description": " Easing strengh"}], "description": "An easing that's softer at the beginning and stronger at the end", "guessedname": "easeout", "guessedtype": "function"}}, "static": "", "file": "anim.js", "guessedtype": "property", "shortname": "Easing", "description": "Easing modes"}, "DataTable": {"name": "DataTable", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A DataTable is an HTML table that can be sorted and linked to a DataSource"}], "namespace": "", "module": "datatable", "guessedname": "DataTable", "methods": {"onDataReturnReplaceRows": {"params": [{"type": "EventFacade", "name": "e", "description": ""}, {"type": "RecordSet", "name": "recordSet", "description": ""}], "description": "Replace all rows when the DataSource updates", "guessedname": "onDataReturnReplaceRows", "guessedtype": "function"}, "onDataReturnAddRows": {"params": [{"type": "EventFacade", "name": "e", "description": ""}, {"type": "RecordSet", "name": "newRecordSet", "description": ""}], "description": "When the DataSource updates, treat the returned data as additions to the table's recordSet", "guessedname": "onDataReturnAddRows", "guessedtype": "function"}, "getFirstTd": {"return": {"type": "", "description": "NodeList"}, "params": [{"type": "Record | HTMLTrElement | NodeList | Number", "name": "row", "description": ""}], "description": "Returns the first cell element in a row", "guessedname": "getFirstTd", "guessedtype": "function"}, "addRows": {"chainable": "", "params": [{"type": "Array", "name": "rows", "description": ""}], "description": "Adds several rows", "guessedname": "addRows", "guessedtype": "function"}, "getNextTd": {"return": {"type": "", "description": "NodeList"}, "params": [{"type": "Record | HTMLTrElement | NodeList | Number", "name": "td", "description": ""}], "description": "Returns the next cell element in a row based on the one passed as a parameter", "guessedname": "getNextTd", "guessedtype": "function"}, "addRow": {"chainable": "", "params": [{"type": "Record|HTMLRowElement|Array", "name": "row", "description": ""}], "description": "Adds a row", "guessedname": "addRow", "guessedtype": "function"}, "getNextTr": {"return": {"type": "", "description": "NodeList"}, "params": [{"type": "Record | HTMLTrElement | NodeList | Number", "name": "tr", "description": ""}], "description": "Returns the next html row element base on the one passed as a parameter", "guessedname": "getNextTr", "guessedtype": "function"}, "getFirstTr": {"return": {"type": "", "description": "NodeList"}, "description": "Returns the first html row element in the table", "guessedname": "getFirstTr", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "datatable.js", "guessedtype": "function", "shortname": "DataTable", "description": "A DataTable is an HTML table that can be sorted and linked to a DataSource"}, "History": {"name": "History", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "History management class"}], "namespace": "", "module": "history", "events": {"change": {"params": [{"type": "Hash", "name": "hashData", "description": " A hash with the URI data"}, {"type": "Object", "name": "Additional", "description": " data associated with the current state"}], "description": "Fires when the history changes"}}, "guessedname": "History", "methods": {"initialize": {"chainable": "", "description": "Initialize our DHTML history. You must call this after the page is finished loading", "guessedname": "initialize", "guessedtype": "function"}, "changeTitle": {"chainable": "", "description": "Change the current HTML title", "guessedname": "changeTitle", "guessedtype": "function"}, "add": {"chainable": "", "params": [{"type": "String", "name": "newLocation", "description": " required - This will be the #hash value in the URL. Users can bookmark it. It will persist across sessions, so\r\nyour application should be able to restore itself to a specific state based on just this value. It\r\nshould be either a simple keyword for a viewstate or else a pseudo-querystring."}, {"type": "Hash", "name": "historyData", "description": " optional - This is for complex data that is relevant only to the current browsing session. It will be available\r\nto your application until the browser is closed. If the user comes back to a bookmarked history point\r\nduring a later session, this data will no longer be available. Don't rely on it for application\r\nre-initialization from a bookmark."}, {"type": "String", "name": "historyData.newTitle", "description": " optional - This will swap out the html <code><title></code> attribute with a new value. \r\nIf you have set a baseTitle using the options bundle, the value will be plugged into the baseTitle by swapping out the @@@ replacement param."}], "description": "Add a history point", "guessedname": "add", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "history.js", "guessedtype": "function", "shortname": "History", "configs": {"baseTitle": {"type": "String", "description": "pattern for title changes. Example: \"Armchair DJ [@@@]\" - @@@ will be replaced", "guessedname": "baseTitle", "guessedtype": "property"}, "firstLoad": {"readonly": "", "type": "Boolean", "description": "Whether this is the first time the History loaded or not", "guessedname": "firstLoad", "guessedtype": "property"}, "blankURL": {"default": "\"blank.html?\"", "description": "string to override the default location of blank.html. Must end in \"?\"", "guessedname": "blankURL", "guessedtype": "property"}, "encodeURI": {"type": "Boolean", "description": "Whether to encode the URI or not", "guessedname": "encodeURI", "guessedtype": "property"}}, "description": "History management class"}, "Vector.RoundedRectangle": {"name": "Vector.RoundedRectangle", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A rectangle with rounded corners"}], "namespace": "Vector", "module": "vector", "guessedname": "RoundedRectangle", "extends": "Rectangle", "superclass": "Rectangle", "file": "vector.js", "guessedtype": "function", "shortname": "RoundedRectangle", "description": "A rectangle with rounded corners"}, "Vector.Ellipse": {"name": "Vector.Ellipse", "namespace": "Vector", "module": "vector", "guessedname": "Ellipse", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "function", "shortname": "Ellipse", "param": "{Object} config", "description": "An ellipse"}, "Vector.Text": {"name": "Vector.Text", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "An Text vector"}], "namespace": "Vector", "module": "vector", "guessedname": "Text", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "function", "shortname": "Text", "description": "An Text vector"}, "Attribute": {"name": "Attribute", "constructors": [{"description": "Provides get() and set() methods, along with getters, setters and options for configuration attributres"}], "namespace": "", "module": "base", "guessedname": "Attribute", "methods": {"addAttr": {"chainable": "", "params": [{"type": "String", "name": "attrName", "description": ""}, {"type": "Hash", "name": "config", "description": ""}], "description": "Adds a configuration attribute, along with its options", "guessedname": "addAttr", "guessedtype": "property"}, "getAttrs": {"return": {"type": "Hash", "description": ""}, "description": "Returns a key/value paired object with all attributes", "guessedname": "getAttrs", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "attrName", "description": ""}], "description": "Returns a configuration attribute", "guessedname": "get", "guessedtype": "function"}, "set": {"chainable": "", "params": [{"type": "String", "name": "attrName", "description": ""}, {"type": "Object", "name": "attrValue", "description": ""}], "description": "Sets a configuration attribute", "guessedname": "set", "guessedtype": "function"}, "addAttrs": {"chainable": "", "params": [{"type": "Hash", "name": "config", "description": " - key/value pairs of attribute names and configs"}], "description": "Adds several configuration attributes", "guessedname": "addAttrs", "guessedtype": "function"}, "isSet": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String", "name": "attrName", "description": ""}], "description": "Returns whether an attribute is set or not", "guessedname": "isSet", "guessedtype": "function"}, "unset": {"chainable": "", "params": [{"type": "String", "name": "attrName", "description": ""}], "description": "Unsets a configuration attribute", "guessedname": "unset", "guessedtype": "function"}}, "extends": "EventTarget", "superclass": "EventTarget", "file": "base.js", "guessedtype": "function", "shortname": "Attribute", "description": "Provides get() and set() methods, along with getters, setters and options for configuration attributres"}, "Image": {"name": "Image", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying image configuration properties"}], "description": "The Image class enhances the native class"}], "namespace": "", "module": "imageloader", "events": {"load": {"description": "Fires when the image finished loading successfully"}, "complete": {"description": "Fires when the image finished loading, successfully or not"}, "error": {"description": "Fires if the image didn't load successfully"}}, "guessedname": "Img", "methods": {"load": {"chainable": "", "description": "Start loading the image", "guessedname": "load", "guessedtype": "function"}, "setAsBackground": {"chainable": "", "params": [{"type": "DOMNode | NodeList", "name": "node", "description": " Which node to set the image as background of"}], "description": "Set the image as a background once it loaded", "guessedname": "setAsBackground", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "function", "shortname": "Image", "configs": {"node": {"type": "NodeList", "description": "A NodeList with the image node", "guessedname": "node", "guessedtype": "property"}, "src": {"description": "URI of the image to load", "writeonce": "", "required": "", "guessedname": "src", "guessedtype": "property", "type": "String"}, "image": {"readonly": "", "description": "A pointer to the actual Image object", "guessedname": "image", "guessedtype": "property"}, "timeout": {"default": "5000", "type": "Number (ms)", "description": "Time the image can spend loading before firing the timeout event", "guessedname": "timeout", "guessedtype": "property"}, "loaded": {"readonly": "", "type": "Boolean", "description": "Specifies if the image has finished loading or not", "guessedname": "loaded", "guessedtype": "property"}, "type": {"type": "String", "description": "The image type. Used to specify if an image is PNG", "guessedname": "type", "guessedtype": "property"}}, "description": "The Image class enhances the native class"}, "Get": {"name": "Get", "namespace": "", "module": "jet", "guessedname": "Get", "methods": {"update": {"private": "", "description": "Checks the state of each queue. If a queue has finished loading it executes it", "guessedname": "update", "guessedtype": "function"}, "css": {"params": [{"type": "String", "name": "url", "description": ""}], "description": "Loads a CSS file", "guessedname": "css", "guessedtype": "property"}, "script": {"params": [{"type": "String", "name": "url", "description": ""}], "description": "Loads a script asynchronously", "guessedname": "script", "guessedtype": "property"}}, "static": "", "file": "jet.js", "guessedtype": "property", "shortname": "Get", "description": "Loads scripts and CSS files.\r\nIncluded with the jet() core"}, "Module": {"name": "Module", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A module is a basic container with header, body and footer"}], "namespace": "", "module": "container", "guessedname": "Module", "extends": "Widget", "superclass": "Widget", "file": "container.js", "guessedtype": "function", "shortname": "Module", "configs": {"body": {"default": "\"\"", "type": "DOM Node | String | NodeList", "description": "The body of the module.\r\nIf set to a string a node is creating and the string is set to its innerHTML\r\nA body is always present in a Module", "guessedname": "body", "guessedtype": "property"}, "header": {"type": "DOM Node | String | NodeList", "description": "The header of the module.\r\nIf set to a string a node is creating and the string is set to its innerHTML", "guessedname": "header", "guessedtype": "property"}, "footer": {"type": "DOM Node | String | NodeList", "description": "The footer of the module.\r\nIf set to a string a node is creating and the string is set to its innerHTML", "guessedname": "footer", "guessedtype": "property"}}, "description": "A module is a basic container with header, body and footer"}, "OOP": {"name": "OOP", "namespace": "", "module": "base", "methods": {"augment": {"params": [{"type": "Function", "name": "subclass", "description": ""}, {"type": "Function|Object", "name": "augmenter", "description": ""}, {"type": "Boolean", "name": "overwrite", "description": ""}], "description": "Augments a class with the functionality of another, without chaining prototypes", "guessedname": "augment", "guessedtype": "function"}, "extend": {"params": [{"type": "Function", "name": "subclass", "description": ""}, {"type": "Function", "name": "superclass", "description": ""}, {"type": "Hash", "name": "optional", "description": " - An object literal with methods to overwrite in the subclass' prototype"}], "description": "Allows for an inheritance strategy based on prototype chaining.\r\nWhen exteiding a class with extend, you keep all prototypic methods from all superclasses"}}, "static": "", "file": "base.js", "shortname": "OOP", "description": "Utilities for object oriented programming in JavaScript.\r\nJET doesn't provide a classical OOP environment like Prototype with Class methods,\r\nbut instead it helps you take advantage of JavaScript's own prototypical OOP strategy"}, "Tab": {"name": "Tab", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A tab instance has a label and a panel"}], "namespace": "", "module": "tabs", "guessedname": "Tab", "methods": {"unselect": {"description": "Deselects this tab", "chainable": "", "params": [{"type": "Boolean", "name": "silent", "description": " If true, the \"selected\" event is not fired"}], "guessedname": "unselect", "guessedtype": "function", "mehtod": "unselect"}, "remove": {"description": "Removes this tab from the DOM", "guessedname": "remove", "guessedtype": "function"}, "select": {"description": "Selects this tab", "chainable": "", "params": [{"type": "Boolean", "name": "silent", "description": " If true, the \"selected\" event is not fired"}], "guessedname": "select", "guessedtype": "function", "mehtod": "select"}}, "extends": "Base", "superclass": "Base", "file": "tabs.js", "guessedtype": "function", "shortname": "Tab", "configs": {"panel": {"required": "", "type": "String | DOM Node", "description": "The element or text to use as a panel", "guessedname": "panel", "guessedtype": "property"}, "selected": {"default": "false", "type": "Boolean", "description": "True if this is the currently selected tab of a TabView", "guessedname": "selected", "guessedtype": "property"}, "label": {"required": "", "type": "String | LI Node", "description": "The text to use as label", "guessedname": "label", "guessedtype": "property"}}, "description": "A tab instance has a label and a panel"}, "TabView": {"name": "TabView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A view of tabs"}], "namespace": "", "module": "tabs", "guessedname": "TabView", "methods": {"add": {"chainable": "", "params": [{"type": "Tab", "name": "tab", "description": ""}, {"type": "Number", "name": "index", "description": ""}], "description": "Adds a tab at the specified point of the list", "guessedname": "add", "guessedtype": "function"}, "select": {"chainable": "", "params": [{"type": "Tab", "name": "tab", "description": ""}], "description": "Selects a certain tab", "guessedname": "select", "guessedtype": "function"}, "remove": {"chainable": "", "params": [{"type": "Tab", "name": "tab", "description": ""}], "description": "Removes a tab from the tabview", "guessedname": "remove", "guessedtype": "function"}, "getTab": {"return": {"type": "Tab", "description": "tab"}, "params": [{"type": "Number", "name": "index", "description": ""}], "description": "Returns the tab in the specified position", "guessedname": "getTab", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "tabs.js", "guessedtype": "function", "shortname": "TabView", "events": {"tabSelect": {"params": [{"type": "Tab", "name": "selectedTab", "description": ""}], "description": "Fires when a tab is selected"}}, "description": "A view of tabs"}, "Array": {"name": "Array", "namespace": "", "module": "jet", "guessedname": "ArrayHelper", "methods": {"indexOf": {"return": {"type": "Number", "description": ""}, "params": [{"type": "Object", "name": "needle", "description": ""}, {"type": "Array", "name": "haystack", "description": ""}], "description": "Returns the index of the first occurence of needle", "guessedname": "indexOf", "guessedtype": "function"}, "inArray": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "needle", "description": ""}, {"type": "Array", "name": "haystack", "description": ""}], "description": "Returns whether needle is present in haystack", "guessedname": "inArray", "guessedtype": "function"}, "remove": {"params": [{"type": "Object", "name": "needle", "description": ""}, {"type": "Array", "name": "haystack", "description": ""}], "description": "Searchs an haystack and removes the needle if found", "guessedname": "remove", "guessedtype": "function"}, "each": {"params": [{"type": "Array", "name": "arr", "description": ""}, {"type": "Function", "name": "fn", "description": " callback"}, {"type": "Object", "name": "thisp", "description": " sets up the <b>this</b> keyword inside the callback"}], "description": "Iterates through an array"}}, "static": "", "file": "jet.js", "guessedtype": "property", "shortname": "Array", "description": "Utilities for working with Arrays"}, "SimpleProgressBar": {"file": "spbar.js", "description": "A simple progressbar for when a lot of modules are needed", "namespace": "", "module": "simpleprogressbar", "methods": {"update": {"params": [{"type": "Number", "name": "progress", "description": " A number between 0 and 1 specifying the percent ready"}], "description": "Updates the progressbar's progress", "guessedname": "update", "guessedtype": "function"}, "render": {"params": [{"type": "DOMNode | NodeList", "name": "target", "description": ""}], "description": "Renders the progressbar", "guessedname": "render", "guessedtype": "function"}}, "param": "{Object} config Object literal specifying configuration properties", "guessedname": "SimpleProgressBar", "guessedtype": "function", "shortname": "SimpleProgressBar", "name": "SimpleProgressBar"}, "UA": {"name": "UA", "namespace": "", "module": "ua", "guessedname": "UA", "static": "", "file": "ua.js", "guessedtype": "function", "shortname": "UA", "properties": {"opera": {"description": "true if the browser is Opera", "guessedname": "opera", "guessedtype": "property"}, "ie": {"description": "If the browser is Internet Explorer, this property is equal to the IE version. If not, it is false", "guessedname": "ie", "guessedtype": "property"}, "mac": {"description": "true if the operating system is Apple OSX", "guessedname": "mac", "guessedtype": "property"}, "win": {"description": "true if the operating system is Windows", "guessedname": "win", "guessedtype": "property"}, "webkit": {"description": "true if the browser uses the Webkit rendering engine (ie: Safari, Chrome)", "guessedname": "webkit", "guessedtype": "property"}, "gecko": {"description": "true if the browser is based on the Gecko rendering engine (ie: Firefox)", "guessedname": "gecko", "guessedtype": "property"}}, "description": "Browser sniffing"}, "ImageLoader": {"name": "ImageLoader", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "Handles loading of multiple images"}], "namespace": "", "module": "imageloader", "events": {"image:timeout": {"params": [{"type": "Image", "name": "the", "description": " image that fired the event"}], "description": "Fires when each image fires its timeout event"}, "image:complete": {"params": [{"type": "Image", "name": "the", "description": " image that fired the event"}], "description": "Fires when each image fires its complete event"}, "image:error": {"params": [{"type": "Image", "name": "the", "description": " image that fired the event"}], "description": "Fires when each image fires its error event"}, "progress": {"params": [{"type": "Number", "name": "percentage", "description": " completed"}], "description": "Fires each time an image loads"}, "image:load": {"params": [{"type": "Image", "name": "the", "description": " image that fired the event"}], "description": "Fires when each image fires its load event"}, "complete": {"description": "Fires when all images loaded"}}, "guessedname": "ImageLoader", "methods": {"load": {"chainable": "", "description": "Loads all images whose srcs where specified", "guessedname": "load", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "function", "shortname": "ImageLoader", "configs": {"srcs": {"type": "Array", "description": "An array of image URIs", "guessedname": "srcs", "guessedtype": "property"}}, "description": "Handles loading of multiple images"}, "Utility": {"name": "Utility", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Basic class for all utilities"}], "namespace": "", "module": "base", "guessedname": "Utility", "methods": {"destroy": {"description": "Calls itself when the window unloads. Allows for easier memory cleanup", "guessedname": "destroy", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "base.js", "guessedtype": "function", "shortname": "Utility", "description": "Basic class for all utilities"}}, "version": "0.1.53", "namespaces": ["", "utils", "DataSource", "Vector"]}