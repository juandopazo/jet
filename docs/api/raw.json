{"majorversion": 3, "classmap": {"Paginator": {"name": "Paginator", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A simple paginator that works on top of a data source"}], "namespace": "", "module": "paginator", "events": {"prevNextChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevNextChange", "description": "Fires when the value for the configuration attribute 'prevNext' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pagesShownChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pagesShownChange", "description": "Fires when the value for the configuration attribute 'pagesShown' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevTextChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevTextChange", "description": "Fires when the value for the configuration attribute 'prevText' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextTextChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextTextChange", "description": "Fires when the value for the configuration attribute 'nextText' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "recordSetChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordSetChange", "description": "Fires when the value for the configuration attribute 'recordSet' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageCountChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageCountChange", "description": "Fires when the value for the configuration attribute 'pageCount' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "recordsPerPageChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordsPerPageChange", "description": "Fires when the value for the configuration attribute 'recordsPerPage' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentPageChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentPageChange", "description": "Fires when the value for the configuration attribute 'currentPage' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstTextChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstTextChange", "description": "Fires when the value for the configuration attribute 'firstText' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstLastChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstLastChange", "description": "Fires when the value for the configuration attribute 'firstLast' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastTextChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastTextChange", "description": "Fires when the value for the configuration attribute 'lastText' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Paginator", "methods": {"goTo": {"chainable": "", "params": [{"type": "Number", "name": "page", "description": ""}], "description": "Go to a certain page", "guessedname": "goTo", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "paginator.js", "guessedtype": "function", "shortname": "Paginator", "configs": {"lastText": {"description": "The text of the \"last\" button", "writeonce": "", "default": "\"last >>\"", "guessedname": "lastText", "guessedtype": "property", "type": "String"}, "pageCount": {"readonly": "", "type": "Number", "description": "The number of pages in the paginator", "guessedname": "pageCount", "guessedtype": "property"}, "recordSet": {"required": "", "type": "RecordSet", "description": "A RecordSet with the data the paginator should handle", "guessedname": "recordSet", "guessedtype": "property"}, "firstLast": {"default": "true", "type": "Boolean", "description": "Wheter the \"First\" and \"Last\" buttons should appear", "guessedname": "firstLast", "guessedtype": "property"}, "prevNext": {"default": "true", "type": "Boolean", "description": "Wheter the \"previous\" and \"next\" buttons should appear", "guessedname": "prevNext", "guessedtype": "property"}, "pagesShown": {"default": "5", "type": "Number", "description": "Number of pages that should be listed in the paginator (1, 2, 3...)", "guessedname": "pagesShown", "guessedtype": "property"}, "firstText": {"description": "The text of the \"first\" button", "writeonce": "", "default": "\"<< first\"", "guessedname": "firstText", "guessedtype": "property", "type": "String"}, "recordsPerPage": {"default": "10", "type": "Number", "description": "Number of records each page should show", "guessedname": "recordsPerPage", "guessedtype": "property"}, "currentPage": {"guessedtype": "property", "type": "Number", "description": "The current selected page. If set in the config, \r\nthe paginator will go directly to that page when rendered", "guessedname": "currentPage", "writeonce": ""}, "prevText": {"description": "The text of the \"previous\" button", "writeonce": "", "default": "\"< prev\"", "guessedname": "prevText", "guessedtype": "property", "type": "String"}, "nextText": {"description": "The text of the \"next\" button", "writeonce": "", "default": "\"next >\"", "guessedname": "nextText", "guessedtype": "property", "type": "String"}}, "description": "A simple paginator that works on top of a data source"}, "Get": {"name": "Get", "namespace": "", "module": "io", "guessedname": "Get", "methods": {"css": {"chainable": "", "params": [{"type": "String", "name": "url", "description": ""}], "description": "Loads a CSS file", "guessedname": "css", "guessedtype": "function"}, "script": {"chainable": "", "params": [{"type": "String", "name": "url", "description": ""}], "description": "Loads a script asynchronously", "guessedname": "script", "guessedtype": "function"}}, "static": "", "file": "jet.js", "guessedtype": "function", "shortname": "Get", "description": "Loads scripts and CSS files.\r\nIncluded in the jet() core"}, "CheckBox": {"name": "CheckBox", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A Checkbox"}], "namespace": "", "module": "button", "guessedname": "CheckBox", "extends": "Button", "superclass": "Button", "file": "button.js", "guessedtype": "property", "shortname": "CheckBox", "description": "A Checkbox"}, "NodeList": {"name": "NodeList", "description": "A collection of DOM Nodes", "constructors": [{"params": [{"type": "Array|DOMCollection|DOMNode", "name": "nodes", "description": ""}, {"type": "DOMNode|Document", "name": "root", "description": ""}], "description": "A collection of DOM Nodes"}], "namespace": "", "module": "node", "file": "node.js", "shortname": "NodeList", "methods": {"offsetParent": {"return": {"type": "", "description": "NodeList"}, "description": "Returns a new NodeList with all the offset parents of this one", "guessedname": "offsetParent", "guessedtype": "function"}, "show": {"chainable": "", "description": "Shows all nodes", "guessedname": "show", "guessedtype": "function"}, "contentDoc": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the documents of all the nodes in the collection that are Iframes", "guessedname": "contentDoc", "guessedtype": "function"}, "height": {"description": "Gets/sets the height of all the nodes in the collection", "chainable": "", "param": "{String|Number} [height]", "params": [{"type": "String|Number", "name": "[height]", "description": ""}], "guessedname": "height", "guessedtype": "function"}, "toggle": {"chainable": "", "description": "If a node in the collection is hidden, it shows it. If it is visible, it hides it.", "guessedname": "toggle", "guessedtype": "function"}, "value": {"description": "Sets or returns the value of the node. Useful mostly for form elements", "chainable": "", "param": "{String} value - optional", "params": [{"type": "String", "name": "value", "description": " - optional"}], "guessedname": "value", "guessedtype": "function"}, "ready": {"description": "Executes a callback when the DOM to which the first node in the collection belongs is ready", "chainable": "", "param": "{Function} callback", "params": [{"type": "Function", "name": "callback", "description": ""}], "guessedname": "ready", "guessedtype": "property"}, "animate": {"chainable": "", "params": [{"type": "Hash", "name": "props", "description": ""}, {"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Animates all members of the node list. <strong>Requires the Anim module</strong>", "guessedname": "animate", "guessedtype": "function"}, "eq": {"param": "{Number} nth", "params": [{"type": "Number", "name": "nth", "description": ""}], "description": "Returns a new NodeList with the nth element of the current list", "guessedname": "eq", "guessedtype": "function"}, "find": {"return": {"type": "NodeList", "description": ""}, "description": "Finds all the nodes below the ones in the current collection that match the search query", "param": "{String} query", "params": [{"type": "String", "name": "query", "description": ""}], "guessedname": "find", "guessedtype": "function"}, "append": {"description": "Appends nodes to the ones in the current node list", "chainable": "", "param": "{DOMNode|Array|NodeList} appended", "params": [{"type": "DOMNode|Array|NodeList", "name": "appended", "description": ""}], "guessedname": "append", "guessedtype": "function"}, "size": {"return": {"type": "", "description": "Number"}, "description": "Returns the length of this NodeList", "guessedname": "size", "guessedtype": "function"}, "filter": {"return": {"type": "", "description": "NodeList"}, "description": "Returns a new nodelist with only the nodes for which the provided function returns true", "param": "{Function} fn", "params": [{"type": "Function", "name": "fn", "description": ""}], "guessedname": "filter", "guessedtype": "function"}, "hide": {"chainable": "", "description": "Hides all nodes", "guessedname": "hide", "guessedtype": "function"}, "parent": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the parents of the current nodes", "guessedname": "parent", "guessedtype": "function"}, "slideUp": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to slide up, changing their height and setting their overflow\r\nto hidden for the duration of the animation. <strong>Requires the Anim module</strong>", "guessedname": "slideUp", "guessedtype": "function"}, "next": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the next siblings of the nodes in the collection", "guessedname": "next", "guessedtype": "function"}, "setClass": {"description": "Sets the class name of all nodes in the collection", "chainable": "", "param": "{String} sClass", "params": [{"type": "String", "name": "sClass", "description": ""}], "guessedname": "setClass", "guessedtype": "function"}, "width": {"description": "Gets/sets the width of all the nodes in the collection", "memberof": "NodeList", "chainable": "", "param": "{String|Number} [width]", "params": [{"type": "String|Number", "name": "[width]", "description": ""}], "guessedname": "width", "guessedtype": "function"}, "appendTo": {"description": "Appends all nodes in the current collection to the target node", "chainable": "", "param": "{DOMNode|NodeList} target", "params": [{"type": "DOMNode|NodeList", "name": "target", "description": ""}], "guessedname": "appendTo", "guessedtype": "function"}, "fadeIn": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to fade in. <strong>Requires the Anim module</strong>", "guessedname": "fadeIn", "guessedtype": "function"}, "toggleClass": {"description": "Adds/removes a certain class from all nodes in the collection", "chainable": "", "param": "{String} sClass", "params": [{"type": "String", "name": "sClass", "description": ""}], "guessedname": "toggleClass", "guessedtype": "function"}, "previous": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the previous siblings of the nodes in the collection", "guessedname": "previous", "guessedtype": "function"}, "inDoc": {"return": {"type": "", "description": "Boolean"}, "description": "Returns whether the first node in this NodeList is inserted in the document", "param": "[Document] doc", "params": [{"type": "Document", "name": "doc", "description": ""}], "guessedname": "inDoc", "guessedtype": "function"}, "css": {"description": "Gets or sets CSS styles", "chainable": "", "param": "{String|Hash} key", "params": [{"type": "String|Hash", "name": "key", "description": ""}, {"type": "String", "name": "[value]", "description": ""}], "guessedname": "css", "guessedtype": "function"}, "addClass": {"chainable": "", "description": "Adds a number of classes to all nodes in the collection\r\nTakes multiple string parameters", "guessedname": "addClass", "guessedtype": "function"}, "map": {"return": {"type": "", "description": "NodeList"}, "description": "Iterates through the nodelist, returning a new nodelist with all the elements\r\nreturn by the callback function", "param": "{Function} fn", "params": [{"type": "Function", "name": "fn", "description": ""}], "guessedname": "map", "guessedtype": "function"}, "insertBefore": {"description": "Inserts all nodes in the current node list before the target node", "chainable": "", "param": "{DOMNode|NodeList} before", "params": [{"type": "DOMNode|NodeList", "name": "before", "description": ""}], "guessedname": "insertBefore", "guessedtype": "function"}, "fadeOut": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to fade out. <strong>Requires the Anim module</strong>", "guessedname": "fadeOut", "guessedtype": "function"}, "clone": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all nodes cloned from the current one", "param": "{Boolean} deep If true, all nodes in the brach are cloned. If not, only the ones in the collection", "params": [{"type": "Boolean", "name": "deep", "description": " If true all nodes in the brach are cloned. If not, only the ones in the collection"}], "guessedname": "clone", "guessedtype": "function"}, "removeClass": {"chainable": "", "description": "Removes a number of classes from all nodes in the collection.\r\nTakes multiple string parameters", "guessedname": "removeClass", "guessedtype": "function"}, "stop": {"chainable": "", "description": "Makes the current animation for this nodelist stop. <strong>Requires the Anim module</strong>", "guessedname": "stop", "guessedtype": "function"}, "unbind": {"description": "Removes an event listener from all the nodes", "chainable": "", "param": "{String} type", "params": [{"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "guessedname": "unbind", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Fires the focus event", "guessedname": "focus", "guessedtype": "function"}, "link": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList containing all the nodes in the current list and the ones in the new one\r\nUseful for applying properties to a bigger group of nodes, while keeping the original references", "param": "{NodeList} nodelist", "params": [{"type": "NodeList", "name": "nodelist", "description": ""}], "guessedname": "link", "guessedtype": "function"}, "offset": {"return": {"type": "Hash", "description": ""}, "description": "Returns an object literal containing:\r\n<ul>\r\n<li><strong>top</strong>: top position in px</li>\r\n<li><strong>left</strong>: left position in px</li>\r\n<li><strong>width</strong>: width in px</li>\r\n<li><strong>height</strong>: height in px</li>\r\n</ul>", "guessedname": "offset", "guessedtype": "function"}, "detach": {"chainable": "", "description": "Removes all the nodes from the DOM tree. Unline remove(), it keeps all event listeners", "guessedname": "detach", "guessedtype": "function"}, "slideDown": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to slide down, changing their height and setting their overflow\r\nto hidden for the duration of the animation. <strong>Requires the Anim module</strong>", "guessedname": "slideDown", "guessedtype": "function"}, "setContent": {"description": "Sets the innerHTML of the nodelist by safely removing all children first", "chainable": "", "param": "{String} content", "params": [{"type": "String", "name": "content", "description": ""}], "guessedname": "setContent", "guessedtype": "function"}, "on": {"description": "Adds an event listener to all the nods in the list", "chainable": "", "param": "{String} type", "params": [{"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "callback", "description": ""}, {"type": "Object", "name": "thisp", "description": ""}], "guessedname": "on", "guessedtype": "function"}, "prependTo": {"description": "Inserts all nodes in the current collection before the first child of the target node", "chainable": "", "param": "{DOMNode|NodeList} target", "params": [{"type": "DOMNode|NodeList", "name": "target", "description": ""}], "guessedname": "prependTo", "guessedtype": "function"}, "unbindAll": {"description": "Removes all event listeners from all the current nodes\r\nIf \"crawl\" is true, it also removes them from all the nodes in the branches defined by the nodes", "chainable": "", "param": "{Boolean} crawl", "params": [{"type": "Boolean", "name": "crawl", "description": ""}], "guessedname": "unbindAll", "guessedtype": "function"}, "attr": {"description": "Gets or sets tag attributes to the nodes in the collection", "chainable": "", "param": "{String|Hash} key", "params": [{"type": "String|Hash", "name": "key", "description": ""}, {"type": "String", "name": "[value]", "description": ""}], "guessedname": "attr", "guessedtype": "function"}, "children": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the children of the current nodes", "param": "{String|Number} filter Return only the children that match the tag or index in this parameter", "params": [{"type": "String|Number", "name": "filter", "description": " Return only the children that match the tag or index in this parameter"}], "guessedname": "children", "guessedtype": "function"}, "html": {"description": "Gets or sets the innerHTML of all the nodes in the node list", "chainable": "", "param": "{String} html", "params": [{"type": "String", "name": "html", "description": ""}], "guessedname": "html", "guessedtype": "function"}, "remove": {"chainable": "", "description": "Removes all the nodes from the DOM tree and removes all event listeners from the nodes", "guessedname": "remove", "guessedtype": "function"}, "fadeToggle": {"chainable": "", "params": [{"type": "Number | String", "name": "duration", "description": " The duration in ms or \"fast\", \"normal\", or \"slow\""}, {"type": "String | Function", "name": "easing", "description": " A predefined easing function (\"linear\", \"easein\", \"easeout\", \"sling\") or a custom easing function"}, {"type": "Function", "name": "callback", "description": " Executes when the animation is complete"}], "description": "Causes all nodes to fade in or out. <strong>Requires the Anim module</strong>", "guessedname": "fadeToggle", "guessedtype": "function"}, "currentStyle": {"return": {"type": "CSSDeclaration", "description": ""}, "description": "Returns the computed style of the first node in the collection", "guessedname": "currentStyle", "guessedtype": "function"}, "each": {"description": "Iterates through the NodeList\r\nThe callback is passed a reference to the node and an iteration index. \r\nThe \"this\" keyword also refers to the node. ie:<br/>\r\n<code>$(\"div\").each(function (node, i) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (i % 2 == 1) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(node).addClass(\"even\");<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;} else {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(node).addClass(\"odd\");<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br/>\r\n});</code>", "chainable": "", "param": "{Function} callback", "params": [{"type": "Function", "name": "callback", "description": ""}], "guessedname": "each", "guessedtype": "function"}, "hasClass": {"description": "Returns true if the first node in the collection has the className CSS class", "chainable": "", "param": "{String} className", "params": [{"type": "String", "name": "className", "description": ""}], "guessedname": "hasClass", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Fires the blur event", "guessedname": "blur", "guessedtype": "function"}, "first": {"return": {"type": "NodeList", "description": ""}, "description": "Returns a new NodeList with all the first children of the nodes in the collection", "guessedname": "first", "guessedtype": "function"}}}, "IO": {"name": "IO", "description": "Handles AJAX and JSONP requests", "namespace": "", "module": "io", "static": "", "file": "io.js", "shortname": "IO", "methods": {"ajax": {"params": [{"type": "Hash", "name": "settings", "description": ""}], "description": "Makes an ajax request", "guessedname": "ajax", "guessedtype": "function"}, "xsl": {"params": [{"type": "Hash", "name": "settings", "description": ""}], "description": "Makes a XSL transformation. Loads the files with Ajax if needed. <strong>Requires the io-xsl submodule</strong>", "guessedname": "xsl", "guessedtype": "function"}, "flajax": {"params": [{"type": "Hash", "name": "settings", "description": ""}], "description": "Makes a cross-domain ajax call based on a Flash engine. <strong>Requires the io-xsl submodule</strong>", "guessedname": "flajax", "guessedtype": "function"}}}, "Overlay": {"name": "Overlay", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "An Overlay is a Module that floats in the page (doesn't have position static)"}], "namespace": "", "module": "container", "guessedname": "Overlay", "uses": ["WidgetStack"], "superclass": "Module", "file": "container.js", "guessedtype": "property", "extends": "Module", "shortname": "Overlay", "configs": {"draggable": {"description": "If true, the overlay can be dragged. Requires $.Drag", "writeonce": "", "default": "false", "guessedname": "draggable", "guessedtype": "property", "type": "Boolean"}, "modalBox": {"readonly": "", "type": "NodeList", "guessedname": "modalBox", "guessedtype": "property"}, "modal": {"description": "Whether this overlay should stop the user from interacting with the rest of the page", "writeonce": "", "default": "false", "guessedname": "modal", "guessedtype": "property", "type": "Boolean"}}, "description": "An Overlay is a Module that floats in the page (doesn't have position static)"}, "Menu": {"name": "Menu", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A navigation menu"}], "namespace": "", "module": "menu", "guessedname": "Menu", "uses": ["WidgetParent"], "superclass": "Widget", "file": "menu.js", "guessedtype": "property", "extends": "Widget", "shortname": "Menu", "description": "A navigation menu"}, "Sandbox": {"name": "Sandbox", "constructors": [{"description": "An extension that sandboxes a widget by putting its contentBox inside an iframe"}], "namespace": "", "module": "widget-sandbox", "methods": {"getInstance": {"description": "Returns the jet instance inside the frame", "guessedname": "getInstance", "guessedtype": "function"}}, "file": "widget-sandbox.js", "shortname": "Sandbox", "description": "An extension that sandboxes a widget by putting its contentBox inside an iframe"}, "Tooltip": {"name": "Tooltip", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A simple tooltip implementation"}], "namespace": "", "module": "container", "events": {"fadeInChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fadeInChange", "description": "Fires when the value for the configuration attribute 'fadeIn' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Tooltip", "extends": "Widget", "superclass": "Widget", "file": "container.js", "guessedtype": "property", "shortname": "Tooltip", "configs": {"fadeIn": {"default": "false", "description": "Whether to use a fade animation when appearing. Requires Anim module", "guessedname": "fadeIn", "guessedtype": "property"}}, "description": "A simple tooltip implementation"}, "Tween": {"name": "Tween", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A Tween is a variation of a property during a lapse of time that has a certain easing associated"}], "namespace": "", "module": "anim", "events": {"playingChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "playingChange", "description": "Fires when the value for the configuration attribute 'playing' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "easingStrengthChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "easingStrengthChange", "description": "Fires when the value for the configuration attribute 'easingStrength' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "durationChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "toChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toChange", "description": "Fires when the value for the configuration attribute 'to' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fromChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fromChange", "description": "Fires when the value for the configuration attribute 'from' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "previousTimeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "previousTimeChange", "description": "Fires when the value for the configuration attribute 'previousTime' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Tween", "methods": {"play": {"chainable": "", "params": [{"type": "Number", "name": "startTime", "description": ""}, {"type": "Number", "name": "frameLength", "description": ""}], "description": "Play the tween's animation", "guessedname": "play", "guessedtype": "function"}, "pause": {"chainable": "", "description": "Pauses the tween", "guessedname": "pause", "guessedtype": "function"}, "stop": {"chainable": "", "description": "Stops the tween", "guessedname": "stop", "guessedtype": "function"}, "reverse": {"chainable": "", "description": "Reverses the tween", "guessedname": "reverse", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "property", "shortname": "Tween", "configs": {"node": {"guessedtype": "property", "required": "", "description": "The node that will be animated", "guessedname": "node", "writeonce": ""}, "previousTime": {"private": "", "description": "Previous time is used for pausing. It keeps how much time had\r\nelapsed in the last run before the tween was _paused_.\r\nWhen stopped, \"previous\" is reset to 0.", "guessedname": "previousTime", "guessedtype": "property"}, "from": {"type": "Object", "description": "an object literal with properties that will be animated", "guessedname": "from", "guessedtype": "property"}, "startTime": {"default": "0", "guessedname": "startTime", "description": "Start time is used to calculate the elapsed time of the animation", "private": "", "guessedtype": "property"}, "to": {"type": "Object", "description": "an object literal with the target properties for the animation", "guessedname": "to", "guessedtype": "property"}, "easingStrength": {"default": "2", "type": "Number", "description": "The strength of the easing if applicable. Must be >= 0", "guessedname": "easingStrength", "guessedtype": "property"}, "duration": {"default": "1000", "type": "{String | Number} Allowd strings: \"fast\", \"slow\", \"normal\". Numbers are milliseconds", "description": "The duration of the animation", "guessedname": "duration", "guessedtype": "property"}, "easing": {"default": "Easing.linear", "type": "Function", "description": "The easing used by the animation", "guessedname": "easing", "guessedtype": "property"}, "playing": {"readonly": "", "type": "Boolean", "description": "Whether the animation is playing or not", "guessedname": "playing", "guessedtype": "property"}}, "description": "A Tween is a variation of a property during a lapse of time that has a certain easing associated"}, "ComboOption": {"name": "ComboOption", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "An option of a <select> element"}], "namespace": "", "module": "button", "events": {"valueChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "textChange", "description": "Fires when the value for the configuration attribute 'text' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ComboOption", "uses": ["WidgetChild"], "superclass": "Widget", "file": "button.js", "guessedtype": "property", "extends": "Widget", "shortname": "ComboOption", "configs": {"text": {"description": "Sets/returns the text of the option", "guessedname": "text", "guessedtype": "property"}, "value": {"description": "Sets/returns the value of the option", "guessedname": "value", "guessedtype": "property"}}, "description": "An option of a <select> element"}, "RadioGroup": {"name": "RadioGroup", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A group of radio buttons that interact together"}], "namespace": "", "module": "button", "events": {"multipleChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "multipleChange", "description": "Fires when the value for the configuration attribute 'multiple' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nameChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "RadioGroup", "uses": ["WidgetParent"], "superclass": "Widget", "file": "button.js", "guessedtype": "property", "extends": "Widget", "shortname": "RadioGroup", "configs": {"multiple": {"default": "false", "readonly": "", "description": "Boolean indicating if multiple children can be selected at once. Whether or not multiple selection is enabled is always delegated to the value of the multiple attribute of the root widget in the object hierarchy", "guessedname": "multiple", "guessedtype": "property"}, "name": {"readonly": "", "description": "Name attribute of all radio buttons in the group", "guessedname": "name", "guessedtype": "property"}}, "description": "A group of radio buttons that interact together"}, "CheckBoxGroup": {"name": "CheckBoxGroup", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A group of checkboxes that interact together"}], "namespace": "", "module": "button", "events": {"nameChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CheckBoxGroup", "uses": ["WidgetParent"], "superclass": "Widget", "file": "button.js", "guessedtype": "property", "extends": "Widget", "shortname": "CheckBoxGroup", "configs": {"name": {"readonly": "", "description": "Name attribute of all checkboxes in the group", "guessedname": "name", "guessedtype": "property"}}, "description": "A group of checkboxes that interact together"}, "Vector.Text": {"name": "Vector.Text", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A Text vector"}], "namespace": "", "module": "vector", "guessedname": "Text", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "property", "shortname": "Vector.Text", "description": "A Text vector"}, "WidgetParent": {"name": "WidgetParent", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A widget extension that makes the current widget contein child widgets"}], "namespace": "", "module": "widget-parentchild", "events": {"defaultChildTypeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultChildTypeChange", "description": "Fires when the value for the configuration attribute 'defaultChildType' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "multipleChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "multipleChange", "description": "Fires when the value for the configuration attribute 'multiple' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectedIndexChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectedIndexChange", "description": "Fires when the value for the configuration attribute 'selectedIndex' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "childrenContainerChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "childrenContainerChange", "description": "Fires when the value for the configuration attribute 'childrenContainer' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectionChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectionChange", "description": "Fires when the value for the configuration attribute 'selection' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "childrenChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "childrenChange", "description": "Fires when the value for the configuration attribute 'children' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "childTypeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "childTypeChange", "description": "Fires when the value for the configuration attribute 'childType' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"item": {"return": {"type": "", "description": "WidgetChild"}, "params": [{"type": "", "name": "index", "description": " [Number] Index of the child to be returned"}], "description": "Returns a child based on an index", "guessedname": "item", "guessedtype": "function"}, "add": {"chainable": "", "params": [{"type": "", "name": "child", "description": " <Widget|Object> The Widget instance, or configuration object for the Widget to be added as a child"}, {"type": "", "name": "index", "description": " <Number> (Optional.) Number representing the position at which the child should be inserted"}], "description": "Adds a Widget as a child. If the specified Widget already has a parent it will be removed from its current parent before being added as a child", "guessedname": "add", "guessedtype": "function"}, "remove": {"chainable": "", "params": [{"type": "WidgetChild|Number", "name": "child", "description": " The child widget or its index"}], "description": "Removes a child", "guessedname": "remove", "guessedtype": "function"}, "each": {"chainable": "", "params": [{"type": "Function", "name": "fn", "description": " Callback"}], "description": "Iterates through all this widget children", "guessedname": "each", "guessedtype": "function"}}, "file": "widget-parentchild.js", "shortname": "WidgetParent", "configs": {"selection": {"default": "null", "type": "Widget|Array", "description": "Returns the currently selected child Widget. If the mulitple attribte is set to true will return an Y.ArrayList instance containing the currently selected children. If no children are selected, will return null", "guessedname": "selection", "guessedtype": "property"}, "multiple": {"default": "false", "description": "Boolean indicating if multiple children can be selected at once. Whether or not multiple selection is enabled is always delegated to the value of the multiple attribute of the root widget in the object hierarchy", "guessedname": "multiple", "guessedtype": "property"}, "childType": {"description": "Constructor reference to the default type of the children managed by this Widget. The default value is taken from defaultChildType", "guessedname": "childType", "guessedtype": "property"}, "defaultChildType": {"default": "WidgetChild", "description": "default value used when a childType is not provided. This attribute is used mostly by classes using WidgetParent.", "guessedname": "defaultChildType", "guessedtype": "property"}, "selectedIndex": {"type": "Number", "description": "The index of the currently selected item", "guessedname": "selectedIndex", "guessedtype": "property"}, "children": {"default": "[]", "description": "An array of instances or configuration objects representing the widget's children", "guessedname": "children", "guessedtype": "property"}, "childrenContainer": {"default": "the content box", "description": "The node inside which to insert the children", "guessedname": "childrenContainer", "guessedtype": "property"}}, "description": "A widget extension that makes the current widget contein child widgets"}, "Vector.Line": {"name": "Vector.Line", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A line vector"}], "namespace": "", "module": "vector", "events": {"y1Change": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "y1Change", "description": "Fires when the value for the configuration attribute 'y1' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "x1Change": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "x1Change", "description": "Fires when the value for the configuration attribute 'x1' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "x2Change": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "x2Change", "description": "Fires when the value for the configuration attribute 'x2' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "y2Change": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "y2Change", "description": "Fires when the value for the configuration attribute 'y2' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Line", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "property", "shortname": "Vector.Line", "configs": {"x2": {"description": "X coordinate of the line's ending point", "guessedname": "x2", "guessedtype": "property"}, "y1": {"description": "Y coordinate of the line's starting point", "guessedname": "y1", "guessedtype": "property"}, "x1": {"description": "X coordinate of the line's starting point", "guessedname": "x1", "guessedtype": "property"}, "y2": {"description": "Y coordinate of the line's ending point", "guessedname": "y2", "guessedtype": "property"}}, "description": "A line vector"}, "LayoutPanelBase": {"name": "LayoutPanelBase", "constructors": [{"description": "Base class used to create both the Layout and LayoutPanel classes.\r\nProvides functionality to resize panels keeping the declared layout structure"}], "namespace": "", "module": "layout", "file": "layout.js", "shortname": "LayoutPanelBase", "configs": {"minSize": {"default": "0", "guessedtype": "property", "description": "Minimum size the panel can acquire. Applies to width or height depending on the 'direction' attribute", "guessedname": "minSize", "writeonce": ""}, "direction": {"default": "LayoutPanelBase.Vertical", "guessedtype": "property", "description": "Direction in which this panel can be resized", "guessedname": "direction", "writeonce": ""}, "defaultChildType": {"default": "LayoutPanel", "description": "Default type to apply to children", "guessedname": "defaultChildType", "guessedtype": "property"}, "shim": {"default": "false", "guessedtype": "property", "description": "Whether the resize utility should use a shim to protect the mouse movements", "guessedname": "shim", "writeonce": ""}}, "description": "Base class used to create both the Layout and LayoutPanel classes.\r\nProvides functionality to resize panels keeping the declared layout structure"}, "Log": {"name": "Log", "namespace": "", "module": "log", "methods": {"warning": {"description": "Logs a warning", "guessedname": "warning", "guessedtype": "function"}, "log": {"description": "Logs a message", "guessedname": "log", "guessedtype": "function"}, "error": {"description": "Logs an error", "guessedname": "error", "guessedtype": "function"}}, "static": "", "file": "log.js", "shortname": "Log", "description": "Adds the following methods to the $ object"}, "Core": {"name": "Core", "namespace": "", "module": "io", "methods": {"$": {"return": {"type": "NodeList", "description": ""}, "params": [{"type": "String|HTMLElement|Array", "name": "query", "description": ""}, {"type": "HTMLElement|Document", "name": "root", "description": ""}], "description": "The global object is a finder method that finds HTML elements.\r\nThe query string allows for different simple searches: \"#foo\" (get elemnet by id), \".foo\" (gets elements by class), \"foo\" (get elements by tag) or an array of html elements\r\nFor more complex queries, take a look at the Sizzle module"}, "update": {"private": "", "description": "Checks the state of each queue. If a queue has finished loading it executes it", "guessedname": "update", "guessedtype": "function"}, "walkTheDOM": {"params": [{"type": "HTMLElement", "name": "node", "description": ""}, {"type": "Function", "name": "fn", "description": ""}], "description": "Walks through the DOM tree starting in th branch that derives from node", "guessedname": "walkTheDOM", "guessedtype": "function"}, "mix": {"params": [{"type": "Object", "name": "A", "description": ""}, {"type": "Object", "name": "B", "description": ""}, {"type": "Boolean", "name": "[overwrite]", "description": ""}], "description": "Copies all properties from B to A.\r\nDoesn't overwrite properties unless the overwrite parameter is true", "guessedname": "mix", "guessedtype": "property"}, "add": {"params": [{"type": "Hash", "name": "key/value", "description": " pairs of class/function names and definitions"}], "description": "Adds properties to the $ object (shortcut for adding classes)", "guessedname": "add", "guessedtype": "property"}, "parseQuery": {"protected": "", "params": [{"type": "String", "name": "query", "description": ""}, {"type": "HTMLElement|Document", "name": "root", "description": ""}], "description": "Does all the work behind the $() function\r\nYou shouldn't overwrite it unless you know what you're doing", "guessedname": "parseQuery", "guessedtype": "function"}}, "static": "", "file": "jet.js", "shortname": "Core", "properties": {"win": {"description": "A pointer to the last Windo that was referenced by the $() function", "guessedname": "win", "guessedtype": "property"}, "context": {"description": "A pointer to the last Document that was referenced by the $() function.", "guessedname": "context", "guessedtype": "property"}}, "description": "Core methods"}, "Widget": {"name": "Widget", "configs": {"srcNode": {"type": "DOMNode | NodeList", "description": "The node to which the widget will be appended to. May be set as a \r\nconfiguration attribute, with a setter or as the first parameter of the render() method", "guessedname": "srcNode", "guessedtype": "property"}, "rendered": {"default": "false", "guessedtype": "property", "description": "Rendered status. Shouldn't be changed by anything appart from the Widget.render() method", "guessedname": "rendered", "writeonce": ""}, "classPrefix": {"default": "Widget.CSS_PREFIX", "guessedtype": "property", "description": "Prefix for all CSS clases. Useful for renaming the project", "guessedname": "classPrefix", "writeonce": ""}, "height": {"type": "Number", "description": "The height of the overlay.\r\nIf set to 0 (zero) the height changes with the content", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Number", "description": "The width of the overlay", "guessedname": "width", "guessedtype": "property"}, "boundingBox": {"description": "The bounding box contains all the parts of the widget", "writeonce": "", "default": "uses BOUNDING_TEMPLATE instance property", "guessedname": "boundingBox", "guessedtype": "property", "type": "NodeList"}, "contentBox": {"description": "Another container inside the boundingBox added in order to have a more complex design", "writeonce": "", "default": "uses CONTENT_TEMPLATE instance property", "guessedname": "contentBox", "guessedtype": "property", "type": "NodeList"}, "id": {"readonly": "", "description": "The id of the widget", "guessedname": "id", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Base class for all widgets. \r\nProvides show, hide, render and destroy methods, the rendering process logic\r\nand basic attributes shared by all widgets"}], "namespace": "", "module": "base", "properties": {"DOM_EVENTS": {"default": "{ click: 1, keypress: 1, mousedown: 1, mouseup: 1, mouseover: 1, mouseout: 1 }", "static": "", "description": "DOM events that are routed automatically to the widget instance", "guessedname": "DOM_EVENTS", "guessedtype": "property"}, "CSS_PREFIX": {"default": "'jet'", "static": "", "description": "Default prefix for all css classes used in widget by the getClassName() method", "guessedname": "CSS_PREFIX", "guessedtype": "property"}}, "methods": {"getByNode": {"static": "", "description": "Returns a widget instance based on a node", "guessedname": "getByNode", "guessedtype": "function"}, "hide": {"chainable": "", "description": "Hides the widget", "guessedname": "hide", "guessedtype": "function"}, "render": {"chainable": "", "params": [{"type": "NodeList|HTMLElement", "name": "target", "description": ""}], "description": "Starts the rendering process. The rendering process is based on custom events.\r\nThe widget class fires a 'render' event to which all subclasses must subscribe.\r\nThis way all listeners are fired in the order of the inheritance chain. ie:\r\nIn the Overlay class, the render process is:\r\n<code>render() method -> Module listener -> Overlay listener -> rest of the render() method (appends the boundingBox to the srcNode)</code>\r\nThis helps to use an easy pattern of OOP CSS: each subclass adds a CSS class name to the boundingBox,\r\nfor example resulting in <div class=\"jet-module jet-overlay jet-panel\"></div>. That way\r\na panel can inherit css properties from module and overlay.", "guessedname": "render", "guessedtype": "function"}, "show": {"chainable": "", "description": "Shows the widget", "guessedname": "show", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Focuses the widget", "guessedname": "focus", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Blurrs the element", "guessedname": "blur", "guessedtype": "function"}, "destroy": {"description": "Destroys the widget by removing the elements from the dom and cleaning all event listeners", "guessedname": "destroy", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "jet.js", "shortname": "Widget", "events": {"heightChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hide": {"description": "Preventing the default behavior will stop the show process"}, "render": {"see": "Widget.render()", "description": "Render event. Preventing the default behavior will stop the rendering process"}, "show": {"description": "Preventing the default behavior will stop the show process"}, "contentBoxChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentBoxChange", "description": "Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "afterHide": {"description": "Fires after the widget was hidden"}, "afterShow": {"description": "Fires after the widget was shown"}, "focus": {"description": "Preventing the default behavior will stop the focus process"}, "idChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "afterRender": {"description": "Fires after the render process is finished"}, "boundingBoxChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderedChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderedChange", "description": "Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "blur": {"description": "Preventing the default behavior will stop the blur process"}, "destroy": {"description": "Preventing the default behavior will stop the destroy process"}, "widthChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "classPrefixChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "classPrefixChange", "description": "Fires when the value for the configuration attribute 'classPrefix' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcNodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcNodeChange", "description": "Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Base class for all widgets. \r\nProvides show, hide, render and destroy methods, the rendering process logic\r\nand basic attributes shared by all widgets"}, "Hash": {"name": "Hash", "namespace": "", "module": "io", "guessedname": "Hash", "methods": {"keys": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Hash", "name": "hash", "description": ""}], "description": "Returns an array with all the keys of a hash", "guessedname": "keys", "guessedtype": "function"}, "values": {"return": {"type": "Array", "description": ""}, "params": [{"type": "Object", "name": "hash", "description": ""}], "description": "Returns an array with all the valus of a hash", "guessedname": "values", "guessedtype": "function"}, "each": {"params": [{"type": "Hash", "name": "hash", "description": ""}, {"type": "Function", "name": "fn", "description": ""}, {"type": "Object", "name": "[thisp]", "description": " Sets the value of the this keyword"}], "description": "Iterats through a hash", "guessedname": "each", "guessedtype": "function"}}, "static": "", "file": "jet.js", "guessedtype": "property", "shortname": "Hash", "description": "Utilities for working with object literals\r\nThroughout jet the Hash type means an object lieteral"}, "jet": {"name": "jet", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal with configuration options"}], "description": "<p>Global function. Returns an object with 2 methods: use() and add().</p>\r\n<code>jet().use(\"node\", function ($) {\r\n//do something with $\r\n});</code>\r\n<p>This snippet will load the Node module, and when it finishes loading it'll execute\r\nthe function. Each module must call the jet.add() method to tell the loader\r\nit has finished loading:</p>\r\n<code>jet.add(\"node\", function ($) {\r\n$.method = function () {};\r\n});</code>\r\n<p>A variable is passed to every module and the function defined in the use() method. \r\nThis variable acts as a main library and is shared by each module and the main\r\nfunction, but not between different calls to the \"use\" method. Ie:</p>\r\n<code>jet().use(\"node\", function ($) {\r\n$.testProperty = \"test\";\r\n});\r\njet().use(\"node\", function ($) {\r\nalert($.testProperty); //alerts \"undefined\"\r\n});</code>\r\n<p>Since it is a parameter, it can have any name but it still acts the same way. Also,\r\neach module is called in the order defined by the \"use\" method. So:</p>\r\n<code>jet().use(\"node\", \"anim\", function (L) {\r\n// Here the L variable contains both Node and Anim\r\n// The Node module is called first on L and the Anim module after,\r\n// so it can overwrite anything Node did, extend classes, etc\r\n});</code>\r\n<p>New modules can be defined by passing an object literal instead of a string to the\r\n\"use\" method with a \"name\" property and a \"path\" or \"fullpath\" property.</p> \r\n<code>jet().use(\"node\", {name:\"myModule\", fullpath:\"http://localhost/myModule.js\"}, function ($) {\r\n//do something\r\n});</code>\r\n<p>If \"path\" is defined instead of \"fullpath\", the loader will append \"path\"\r\nto a predefined base URL. This base URL can be modified by passing\r\nthe jet() function an object literal with a \"base\" property:</p>\r\n<code>jet({\r\nbase: \"http://www.mydomain.com/modules/\"\r\n}).use(\"node\", function ($) {\r\n//in this case the \"core\" module is loaded from http://www.mydomain.com/modules/node.min.js\r\n});</code>"}], "namespace": "", "module": "io", "events": {"baseChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "baseChange", "description": "Fires when the value for the configuration attribute 'base' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadCssChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadCssChange", "description": "Fires when the value for the configuration attribute 'loadCss' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "winChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "winChange", "description": "Fires when the value for the configuration attribute 'win' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "modulesChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modulesChange", "description": "Fires when the value for the configuration attribute 'modules' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "docChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "docChange", "description": "Fires when the value for the configuration attribute 'doc' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "beforeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "beforeChange", "description": "Fires when the value for the configuration attribute 'before' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "jet", "methods": {"use": {"description": "Allows to load modules and obtain a unique reference to the library augmented by the requested modules \r\nThis method works by overloading its parameters. It takes names (String) of predefined modules\r\nor objects defining name and path/fullpath of a module. The last parameter must be a function \r\nthat contains the main logic of the application.", "guessedname": "use", "guessedtype": "property"}, "add": {"static": "", "params": [{"type": "String", "name": "moduleName", "description": ""}, {"type": "Function", "name": "expose", "description": ""}], "description": "Adds a module to the loaded module list and calls update() to check if a queue is ready to fire\r\nThis method must be called from a module to register it", "guessedname": "add", "guessedtype": "function"}}, "file": "jet.js", "guessedtype": "function", "shortname": "jet", "configs": {"win": {"description": "A reference to the global object that is accesible later with $.win", "guessedname": "win", "guessedtype": "property"}, "modules": {"type": "Array", "description": "Allows to define your own modules. Currently the same as using object literals in the use() method"}, "loadCss": {"default": "true", "type": "Boolean", "description": "If true, css modules are loaded", "guessedname": "loadCss", "guessedtype": "property"}, "base": {"default": "\"//jet-js.googlecode.com/svn/trunk/src/\"", "type": "String", "description": "prefix for all script and css urls", "guessedname": "base", "guessedtype": "property"}, "doc": {"description": "A reference to the document that is accesible later with $.doc", "guessedname": "doc", "guessedtype": "property"}, "before": {"description": "id of a node before which to insert all scripts and css files", "guessedname": "get", "guessedtype": "property"}}, "description": "<p>Global function. Returns an object with 2 methods: use() and add().</p>\r\n<code>jet().use(\"node\", function ($) {\r\n//do something with $\r\n});</code>\r\n<p>This snippet will load the Node module, and when it finishes loading it'll execute\r\nthe function. Each module must call the jet.add() method to tell the loader\r\nit has finished loading:</p>\r\n<code>jet.add(\"node\", function ($) {\r\n$.method = function () {};\r\n});</code>\r\n<p>A variable is passed to every module and the function defined in the use() method. \r\nThis variable acts as a main library and is shared by each module and the main\r\nfunction, but not between different calls to the \"use\" method. Ie:</p>\r\n<code>jet().use(\"node\", function ($) {\r\n$.testProperty = \"test\";\r\n});\r\njet().use(\"node\", function ($) {\r\nalert($.testProperty); //alerts \"undefined\"\r\n});</code>\r\n<p>Since it is a parameter, it can have any name but it still acts the same way. Also,\r\neach module is called in the order defined by the \"use\" method. So:</p>\r\n<code>jet().use(\"node\", \"anim\", function (L) {\r\n// Here the L variable contains both Node and Anim\r\n// The Node module is called first on L and the Anim module after,\r\n// so it can overwrite anything Node did, extend classes, etc\r\n});</code>\r\n<p>New modules can be defined by passing an object literal instead of a string to the\r\n\"use\" method with a \"name\" property and a \"path\" or \"fullpath\" property.</p> \r\n<code>jet().use(\"node\", {name:\"myModule\", fullpath:\"http://localhost/myModule.js\"}, function ($) {\r\n//do something\r\n});</code>\r\n<p>If \"path\" is defined instead of \"fullpath\", the loader will append \"path\"\r\nto a predefined base URL. This base URL can be modified by passing\r\nthe jet() function an object literal with a \"base\" property:</p>\r\n<code>jet({\r\nbase: \"http://www.mydomain.com/modules/\"\r\n}).use(\"node\", function ($) {\r\n//in this case the \"core\" module is loaded from http://www.mydomain.com/modules/node.min.js\r\n});</code>"}, "StaticPanel": {"name": "StaticPanel", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "An panel with static position and a close button"}], "namespace": "", "module": "container", "guessedname": "StaticPanel", "uses": ["PanelBase"], "superclass": "Module", "file": "container.js", "guessedtype": "property", "extends": "Module", "shortname": "StaticPanel", "description": "An panel with static position and a close button"}, "Vector.Rectangle": {"name": "Vector.Rectangle", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draws a rectangle"}], "namespace": "", "module": "vector", "guessedname": "Rectangle", "methods": {"rotate": {"chainable": "", "params": [{"type": "Number", "name": "angle", "description": " Angle between 0 and 360"}], "description": "Rotates the rectangle", "guessedname": "rotate", "guessedtype": "function"}}, "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "property", "shortname": "Vector.Rectangle", "description": "Draws a rectangle"}, "ComboBox": {"name": "ComboBox", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A ComboBox is a select html element"}], "namespace": "", "module": "button", "guessedname": "ComboBox", "uses": ["WidgetParent"], "superclass": "Button", "file": "button.js", "guessedtype": "property", "extends": "Button", "shortname": "ComboBox", "description": "A ComboBox is a select html element"}, "DOM": {"name": "DOM", "namespace": "", "module": "node", "guessedname": "DOM", "methods": {"scrollTop": {"description": "Gets the scrolling height or makes the browser scroll", "chainable": "", "param": "{Number} value", "params": [{"type": "Number", "name": "value", "description": ""}], "guessedname": "scrollTop", "guessedtype": "function"}, "pageSize": {"description": "Returns the complete size of the page", "guessedname": "pageSize", "guessedtype": "function"}, "scrollLeft": {"description": "Gets the scrolling width or makes the browser scroll", "chainable": "", "param": "{Number} value", "params": [{"type": "Number", "name": "value", "description": ""}], "guessedname": "scrollLeft", "guessedtype": "function"}, "getWindowFromDocument": {"param": "{Document} document", "params": [{"type": "Document", "name": "document", "description": ""}], "description": "Returns the window object to which the current document belongs", "guessedname": "getWindowFromDocument", "guessedtype": "function"}, "screenSize": {"description": "Returns the inner size of the screen", "guessedname": "screenSize", "guessedtype": "function"}}, "static": "", "file": "node.js", "guessedtype": "property", "shortname": "DOM", "description": "Bla"}, "JSON": {"name": "JSON", "namespace": "", "module": "json", "methods": {"parse": {"params": [{"type": "String", "name": "json", "description": " string"}], "description": "Takes a string and parses it into an object literal"}, "stringify": {"params": [{"type": "Object", "name": "an", "description": " object literal"}], "description": "Takes an object literal and serialices it into a string"}}, "static": "", "file": "json.js", "shortname": "JSON", "description": "JSON parsing"}, "Column": {"name": "Column", "constructors": [{"description": "Represents a column in a DataTable"}], "namespace": "", "module": "datatable", "events": {"cellsChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cellsChange", "description": "Fires when the value for the configuration attribute 'cells' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Column", "methods": {"getNextCell": {"return": {"type": "", "description": "Cell"}, "params": [{"type": "Cell", "name": "td", "description": " The previous cell"}], "description": "Returns the following cell in this collumn base on the one passed as a parameter", "guessedname": "getNextCell", "guessedtype": "function"}, "getFirstCell": {"return": {"type": "", "description": "Cell"}, "description": "Gets the first Cell instance in this column", "guessedname": "getFirstCell", "guessedtype": "function"}, "getFirstTd": {"return": {"type": "", "description": "HTMLElement"}, "description": "Returns the first td element in this column", "guessedname": "getFirstTd", "guessedtype": "function"}, "getNextTd": {"return": {"type": "", "description": "HTMLElement"}, "params": [{"type": "HTMLElement", "name": "td", "description": " The previous td"}], "description": "Returns the following td in this column, based on the one passed as a parameter", "guessedname": "getNextTd", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "datatable.js", "guessedtype": "property", "shortname": "Column", "configs": {"cells": {"guessedtype": "property", "required": "", "description": "A list of cells", "guessedname": "cells", "writeonce": ""}}, "description": "Represents a column in a DataTable"}, "Drag": {"name": "Drag", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Makes an element draggable"}], "namespace": "", "module": "dragdrop", "events": {"handlersChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlersChange", "description": "Fires when the value for the configuration attribute 'handlers' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cursorChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cursorChange", "description": "Fires when the value for the configuration attribute 'cursor' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag": {"description": "Fires during the drag movement"}, "nodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:start": {"description": "First when the dragging starts"}, "drag:end": {"description": "Fires when the drag ends"}, "trackingChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "trackingChange", "description": "Fires when the value for the configuration attribute 'tracking' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Drag", "methods": {"addHandler": {"description": "Adds a handler to the handler list", "chainable": "", "params": [{"type": "HTMLElement | NodeList", "name": "handler", "description": ""}], "guessedname": "addHandler", "guessedtype": "function", "mehtod": "addHandler"}}, "extends": "Base", "superclass": "Base", "file": "dragdrop.js", "guessedtype": "function", "shortname": "Drag", "configs": {"node": {"required": "", "description": "node to be dragged", "guessedname": "node", "guessedtype": "property"}, "cursor": {"type": "String", "description": "the type of cursor that will be shown on hover", "guessedname": "cursor", "guessedtype": "property"}, "tracking": {"type": "Boolean", "description": "the tracking status", "guessedname": "tracking", "guessedtype": "property"}, "handlers": {"type": "Array | NodeList", "description": "A list of elements that will start the dragging"}}, "description": "Makes an element draggable"}, "Base": {"name": "Base", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Base class for all widgets and utilities."}], "namespace": "", "module": "base", "events": {"onChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "onChange", "description": "Fires when the value for the configuration attribute 'on' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Base", "methods": {"create": {"static": "", "params": [{"type": "String", "name": "name", "description": " Name of the base class to create"}, {"type": "Function", "name": "superclass", "description": " [Optional] The superclass for this new class. Defaults to Base"}, {"type": "Array", "name": "extensions", "description": " [Optional] A list of extensions to apply to the created class"}, {"type": "Hash", "name": "attrs", "description": " [Optional] Static properties of the class. Recommended order: ATTRS, EVENTS, HTML_PARSER"}, {"type": "Hash", "name": "proto", "description": " [Optional] Prototype properties to add to the class"}], "description": "creates a new base class", "guessedname": "create", "guessedtype": "function"}}, "extends": "Attribute", "superclass": "Attribute", "file": "jet.js", "guessedtype": "function", "shortname": "Base", "configs": {"on": {"writeonce": "", "description": "Allows quick setting of custom events in the constructor", "guessedname": "on", "guessedtype": "property"}}, "description": "Base class for all widgets and utilities."}, "Cookie": {"name": "Cookie", "namespace": "", "module": "cookie", "guessedname": "Cookie", "methods": {"set": {"chainable": "", "params": [{"type": "String", "name": "name", "description": ""}, {"type": "String", "name": "value", "description": ""}, {"type": "Number", "name": "optional", "description": " - duration of the variable in days"}], "description": "Sets the value of a cookie variable", "guessedname": "set", "guessedtype": "function"}, "isSet": {"params": [{"type": "String", "name": "name", "description": ""}], "description": "Returns whether a cookir variable is set", "guessedname": "isSet", "guessedtype": "function"}, "unset": {"chainable": "", "params": [{"type": "String", "name": "name", "description": ""}], "description": "Removes a cookie", "guessedname": "unset", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "name", "description": ""}], "description": "Get the value of a cookie", "guessedname": "get", "guessedtype": "function"}}, "static": "", "file": "cookie.js", "guessedtype": "property", "shortname": "Cookie", "description": "Provides abstracion for easier use of cookies"}, "DragDrop": {"name": "DragDrop", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "DragDrop class"}], "namespace": "", "module": "dragdrop", "guessedname": "DragDrop", "methods": {"addTarget": {"chainable": "", "params": [{"type": "HTMLElement | NodeList", "name": "target", "description": ""}], "description": "Adds a drop target", "guessedname": "addTarget", "guessedtype": "function"}}, "extends": "Drag", "superclass": "Drag", "file": "dragdrop.js", "guessedtype": "function", "shortname": "DragDrop", "events": {"drop:miss": {"description": "Fires when a draggable object is release but not over any target"}, "drop:hit": {"description": "Fires when a draggable object is drop into a target"}}, "description": "DragDrop class"}, "TimeFrame": {"name": "TimeFrame", "namespace": "", "module": "anim", "guessedname": "TimeFrame", "methods": {"play": {"chainable": "", "description": "Starts the playback", "guessedname": "play", "guessedtype": "function"}, "stop": {"chainable": "", "description": "Stops the playback", "guessedname": "stop", "guessedtype": "function"}, "addTween": {"chainable": "", "params": [{"type": "Tween", "name": "tween", "description": ""}], "description": "Adds a Tween to the queue", "guessedname": "addTween", "guessedtype": "function"}, "removeTween": {"chainable": "", "params": [{"type": "Tween", "name": "tween", "description": ""}], "description": "Removes a Tween from the queue", "guessedname": "removeTween", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "anim.js", "guessedtype": "function", "static": "", "shortname": "TimeFrame", "properties": {"fps": {"default": "35", "description": "Refresh speed in frames per second.\r\nCan't be changed during playback", "guessedname": "fps", "guessedtype": "property"}}, "description": "A timeframe for queueing animations"}, "ToggleButton": {"name": "ToggleButton", "namespace": "", "module": "button", "guessedname": "ToggleButton", "extends": "Button", "superclass": "Button", "file": "button.js", "guessedtype": "property", "shortname": "ToggleButton", "param": "{Object} config Object literal specifying widget configuration properties", "description": "A button widget that selects/unselects itself when clicked"}, "OOP": {"name": "OOP", "namespace": "", "module": "base", "methods": {"extend": {"params": [{"type": "Function", "name": "subclass", "description": ""}, {"type": "Function", "name": "superclass", "description": ""}, {"type": "Hash", "name": "optional", "description": " - An object literal with methods to overwrite in the subclass' prototype"}], "description": "Allows for an inheritance strategy based on prototype chaining.\r\nWhen exteiding a class with extend, you keep all prototypic methods from all superclasses", "guessedname": "extend", "guessedtype": "function"}, "toObj": {"guessedname": "toObj", "params": [{"type": "Object", "name": "o", "description": ""}], "description": "Object function by Douglas Crockford\r\n<a href=\"https://docs.google.com/viewer?url=http://javascript.crockford.com/hackday.ppt&pli=1\">link</a>", "private": "", "guessedtype": "function"}}, "static": "", "file": "jet.js", "shortname": "OOP", "description": "Utilities for object oriented programming in JavaScript.\r\nJET doesn't provide a classical OOP environment like Prototype with Class methods,\r\nbut instead it helps you take advantage of JavaScript's own prototypical OOP strategy"}, "Frame": {"name": "Frame", "configs": {"lang": {"type": "String", "description": "The default language. Default: en-US", "guessedname": "lang", "guessedtype": "property"}, "src": {"type": "String", "description": "The src of the iframe/window. Defaults to javascript:;", "guessedname": "src", "guessedtype": "property"}, "use": {"guessedtype": "property", "type": "Array", "description": "Array of modules to include in the scoped YUI instance at render time. Default: ['none', 'selector-css2']", "guessedname": "use", "writeonce": ""}, "rendered": {"guessedname": "rendered", "type": "Boolean", "description": "Internal reference set when render is called.", "private": "", "guessedtype": "property"}, "container": {"type": "String/HTMLElement/Node", "description": "The container to append the iFrame to on render.", "guessedname": "container", "guessedtype": "property"}, "title": {"type": "String", "description": "The title to give the blank page.", "guessedname": "title", "guessedtype": "property"}, "node": {"type": "Node", "description": "The Node instance of the iframe.", "guessedname": "node", "guessedtype": "property"}, "extracss": {"type": "String", "description": "A string of CSS to add to the Head of the Editor", "guessedname": "extracss", "guessedtype": "property"}, "content": {"type": "String", "description": "The string to inject into the body of the new frame/window.", "guessedname": "content", "guessedtype": "property"}, "linkedcss": {"type": "String", "description": "An array of url's to external linked style sheets", "guessedname": "linkedcss", "guessedtype": "property"}, "id": {"guessedtype": "property", "type": "String", "description": "Set the id of the new Node. (optional)", "guessedname": "id", "writeonce": ""}, "dir": {"type": "String", "description": "The default text direction for this new frame. Default: ltr", "guessedname": "dir", "guessedtype": "property"}}, "constructors": [{"description": "Creates a wrapper around an iframe. It loads the content either from a local\r\nfile or from script and creates a local YUI instance bound to that new window and document."}], "namespace": "", "module": "widget-sandbox", "events": {"contentready": {"description": "Fires when the content is ready to use"}, "contentChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dirChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dirChange", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "langChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "langChange", "description": "Fires when the value for the configuration attribute 'lang' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "extracssChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "extracssChange", "description": "Fires when the value for the configuration attribute 'extracss' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "linkedcssChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linkedcssChange", "description": "Fires when the value for the configuration attribute 'linkedcss' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useChange", "description": "Fires when the value for the configuration attribute 'use' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderedChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderedChange", "description": "Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcChange", "description": "Fires when the value for the configuration attribute 'src' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Frame", "methods": {"_create": {"guessedname": "_create", "return": {"type": "Object", "description": "Hash table containing references to the new Document & Window"}, "description": "Create the iframe or Window and get references to the Document & Window", "private": "", "guessedtype": "function"}, "_setLinkedCSS": {"description": "Set's the linked CSS on the instance..", "private": "", "guessedname": "_getLinkedCSS", "guessedtype": "function"}, "render": {"return": {"type": "$.Frame", "description": ""}, "description": "Render the iframe into the container config option or open the window.", "chainable": "", "params": [{"type": "String/HTMLElement/Node", "name": "node", "description": " The node to render to"}], "guessedname": "render", "guessedtype": "function"}, "getInstance": {"return": {"type": "jet", "description": "The internal YUI instance"}, "description": "Get a reference to the internal YUI instance.", "guessedname": "getInstance", "guessedtype": "function"}, "_setHTML": {"return": {"type": "String", "description": ""}, "description": "Set the content of the iframe", "private": "", "params": [{"type": "String", "name": "html", "description": " The raw HTML to set the body of the iframe to."}], "guessedname": "_setHTML", "guessedtype": "function"}, "_onContentReady": {"description": "Called once the content is available in the frame/window and calls the final use call\r\non the internal instance so that the modules are loaded properl$.", "private": "", "guessedname": "_onContentReady", "guessedtype": "function"}, "_instanceLoaded": {"guessedname": "_instanceLoaded", "params": [{"type": "jet", "name": "inst", "description": " The internal YUI instance bound to the frame/window"}], "description": "Called from the first YUI instance that sets up the internal instance.\r\nThis loads the content into the window/frame and attaches the contentready event.", "private": "", "guessedtype": "function"}, "_setExtraCSS": {"description": "Set's the extra CSS on the instance..", "private": "", "guessedname": "_setExtraCSS", "guessedtype": "function"}, "_resolveWinDoc": {"return": {"type": "Object", "description": "Object hash of window and document references, if a YUI config was passed, it is returned."}, "description": "Resolves the document and window from an iframe or window instance", "private": "", "params": [{"type": "Object", "name": "c", "description": " The YUI Config to add the window and document to"}], "guessedname": "_resolveWinDoc", "guessedtype": "function"}, "getDocType": {"returns": "{String} The normalized DocType to apply to the iframe", "static": "", "description": "Parses document.doctype and generates a DocType to match the parent page, if supported.\r\nFor IE8, it grabs document.all[0].nodeValue and uses that. For IE < 8, it falls back to Frame.DOC_TYPE.", "guessedname": "getDocType", "guessedtype": "function"}, "_getHTML": {"return": {"type": "String", "description": ""}, "description": "Get the content from the iframe", "private": "", "params": [{"type": "String", "name": "html", "description": " The raw HTML from the body of the iframe."}], "guessedname": "_getHTML", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "widget-sandbox.js", "guessedtype": "property", "shortname": "Frame", "properties": {"DOC_TYPE": {"type": "String", "static": "", "description": "The DOCTYPE to prepend to the new document when created. Should match the one on the page being served.", "guessedname": "DOC_TYPE", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "The name of the class (frame)", "guessedname": "ATTRS", "guessedtype": "property"}, "_instance": {"guessedname": "_instance", "type": "YUI", "description": "Internal reference to the YUI instance bound to the iFrame or window", "private": "", "guessedtype": "property"}, "_ready": {"guessedname": "_ready", "type": "Boolean", "description": "Internal reference set when the content is read$.", "private": "", "guessedtype": "property"}, "HTML": {"type": "String", "static": "", "description": "The template string used to create the iframe", "guessedname": "HTML", "guessedtype": "property"}, "META": {"static": "", "type": "String", "description": "The meta-tag for Content-Type to add to the dynamic document"}, "_iframe": {"guessedname": "_iframe", "type": "Node", "description": "Internal Node reference to the iFrame or the window", "private": "", "guessedtype": "property"}, "PAGE_HTML": {"type": "String", "static": "", "description": "The template used to create the page when created dynamicall$.", "guessedname": "PAGE_HTML", "guessedtype": "property"}, "DEFAULT_CSS": {"type": "String", "static": "", "description": "The default css used when creating the document.", "guessedname": "DEFAULT_CSS", "guessedtype": "property"}}, "description": "Creates a wrapper around an iframe. It loads the content either from a local\r\nfile or from script and creates a local YUI instance bound to that new window and document."}, "Layout": {"name": "Layout", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A Layout is a container of Layout Panels"}], "namespace": "", "module": "layout", "guessedname": "Layout", "uses": ["LayoutPanelBase", "WidgetParent"], "superclass": "Widget", "file": "layout.js", "guessedtype": "property", "extends": "Widget", "shortname": "Layout", "description": "A Layout is a container of Layout Panels"}, "Panel": {"name": "Panel", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A panel is an overlay that resembles an OS window without actually being one,\r\nto the problems they have (stop javascript execution, etc)"}], "namespace": "", "module": "container", "guessedname": "Panel", "uses": ["PanelBase"], "superclass": "Overlay", "file": "container.js", "guessedtype": "property", "extends": "Overlay", "shortname": "Panel", "description": "A panel is an overlay that resembles an OS window without actually being one,\r\nto the problems they have (stop javascript execution, etc)"}, "Lang": {"name": "Lang", "namespace": "", "module": "io", "guessedname": "Lang", "methods": {"isArray": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is an array", "guessedname": "isArray", "guessedtype": "function"}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "params": [{"type": "String", "name": "the", "description": " string to trim"}], "description": "Returns a string without any leading or trailing whitespace.\r\nCode by Steven Levithan\r\nhttp://blog.stevenlevithan.com/archives/faster-trim-javascript"}, "isString": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is a string", "guessedname": "isString", "guessedtype": "function"}, "isBoolean": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is a boolean", "guessedname": "isBoolean", "guessedtype": "function"}, "isNative": {"params": [{"type": "Function", "name": "o", "description": ""}], "description": "Returns whether the function is a native function or not", "guessedname": "isNative", "guessedtype": "property"}, "clone": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Clones an object, returning a copy with the sames properties", "guessedname": "clone", "guessedtype": "function"}, "random": {"params": [{"type": "Number", "name": "num", "description": ""}], "description": "A more traditional random function. Returns a random integer between 0 and num-1", "guessedname": "random", "guessedtype": "function"}, "isValue": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns false if o is undefined, null, NaN or Infinity. In any other case, return true", "guessedname": "isValue", "guessedtype": "function"}, "isFunction": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is a function", "guessedname": "isFunction", "guessedtype": "function"}, "isNumber": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is a number", "guessedname": "isNumber", "guessedtype": "function"}, "type": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns the type of the object", "guessedname": "type", "guessedtype": "property"}, "isUndefined": {"params": [{"type": "Object", "name": "o", "description": ""}], "description": "Returns if o is undefined", "guessedname": "isUndefined", "guessedtype": "function"}}, "static": "", "file": "jet.js", "guessedtype": "function", "shortname": "Lang", "description": "Provides utility methods for finding object types and other\r\nmethods that javascript provides in some browsers but not in others such as trim()"}, "DataSource.Ajax": {"name": "DataSource.Ajax", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "An AJAX DataSource"}], "namespace": "", "module": "datasource", "events": {"urlChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "urlChange", "description": "Fires when the value for the configuration attribute 'url' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Ajax", "extends": "DataSource", "superclass": "DataSource", "file": "datasource.js", "guessedtype": "property", "shortname": "DataSource.Ajax", "configs": {"url": {"required": "", "type": "String", "description": "Url from which to fetch the data", "guessedname": "url", "guessedtype": "property"}}, "description": "An AJAX DataSource"}, "TreeNode": {"name": "TreeNode", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A node in a TreeView"}], "namespace": "", "module": "treeview", "events": {"typeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelNodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelNodeChange", "description": "Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "controlNodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "controlNodeChange", "description": "Fires when the value for the configuration attribute 'controlNode' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TreeNode", "uses": ["WidgetParent", "WidgetChild"], "superclass": "Widget", "file": "treeview.js", "guessedtype": "property", "extends": "Widget", "shortname": "TreeNode", "configs": {"controlNode": {"writeonce": "", "description": "Node that expands/collapses this TreeNode", "guessedname": "controlNode", "guessedtype": "property"}, "label": {"type": "String|HTMLElement", "description": "This node's label or title", "guessedname": "label", "guessedtype": "property"}, "type": {"default": "\"text\"", "description": "Type of the node. Available types are 'text'", "guessedname": "type", "guessedtype": "property"}, "labelNode": {"writeonce": "", "description": "Node that holds this TreeNode's title/label", "guessedname": "labelNode", "guessedtype": "property"}, "title": {"type": "String", "description": "Title attribute for the node", "guessedname": "title", "guessedtype": "property"}}, "description": "A node in a TreeView"}, "Mouse": {"name": "Mouse", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A utility for tracking the mouse movement without crashing the browser rendering engine.\r\nAlso allows for moving the mouse over iframes and other pesky elements"}], "namespace": "", "module": "base", "events": {"frequencyChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "frequencyChange", "description": "Fires when the value for the configuration attribute 'frequency' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "move": {"description": "Fires not when the mouse moves, but in an interval defined by the frequency attribute\r\nThis way you can track the mouse position without breakin the browser's rendering engine\r\nbecause the native mousemove event fires too quickly", "guessedname": "shimDoc", "guessedtype": "property"}, "trackingChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "trackingChange", "description": "Fires when the value for the configuration attribute 'tracking' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "up": {"description": "Fires when the mouse button is released"}}, "guessedname": "Mouse", "methods": {"down": {"chainable": "", "description": "Start tracking. Equivalent to setting the tracking attribute to true.\r\nSimulates the mousedown event", "guessedname": "down", "guessedtype": "function"}, "up": {"chainable": "", "description": "Stop tracking. Equivalent to setting the tracking attribute to false\r\nSimulates the mouseup event", "guessedname": "up", "guessedtype": "function"}}, "extends": "Utility", "superclass": "Utility", "file": "jet.js", "guessedtype": "function", "shortname": "Mouse", "configs": {"frequency": {"default": "20 (ms)", "type": "Number", "description": "Frequency at which the tracker updates", "guessedname": "frequency", "guessedtype": "property"}, "tracking": {"default": "false", "type": "Boolean", "description": "Tracking status. Set it to true to start tracking"}}, "description": "A utility for tracking the mouse movement without crashing the browser rendering engine.\r\nAlso allows for moving the mouse over iframes and other pesky elements"}, "WidgetStack": {"name": "WidgetStack", "constructors": [{"description": "Provides stacking support via zIndex and shimming support with iframes"}], "namespace": "", "module": "widget-stack", "events": {"shimChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "zIndexChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"bringToFront": {"chainable": "", "description": "Brings the widget to the front of the stack", "guessedname": "bringToFront", "guessedtype": "function"}, "sendToBack": {"chainable": "", "description": "Sends the widget to the back of the stack", "guessedname": "sendToBack", "guessedtype": "function"}, "syncShim": {"chainable": "", "description": "Syncs the position of the shimming iframe with the position of the boundingBox", "guessedname": "syncShim", "guessedtype": "function"}}, "file": "widget-stack.js", "shortname": "WidgetStack", "configs": {"zIndex": {"default": "0", "description": "The current zIndex value of the widget", "guessedname": "zIndex", "guessedtype": "property"}, "shim": {"default": "true If browser is IE 6. Otherwise, false by default", "type": "Boolean", "description": "Whether the widget should use shimming or not", "guessedname": "shim", "guessedtype": "property"}}, "description": "Provides stacking support via zIndex and shimming support with iframes"}, "RecordSet": {"name": "RecordSet", "constructors": [{"params": [{"type": "Array", "name": "data", "description": " If data is passed, it is converted into several Records"}], "description": "A collections of Records"}], "namespace": "", "module": "datasource", "guessedname": "RecordSet", "methods": {"hasInstance": {"static": "", "params": [{"type": "object", "name": "o", "description": " The object to check"}], "description": "Returns whether an object is a RecordSet", "guessedname": "hasInstance", "guessedtype": "function"}, "replace": {"chainable": "", "params": [{"type": "Array", "name": "data", "description": ""}], "description": "Replaces all records with new data", "guessedname": "replace", "guessedtype": "function"}, "getRecords": {"description": "Returns all records in the set", "guessedname": "getRecords", "guessedtype": "function"}, "sortBy": {"chainable": "", "params": [{"type": "String", "name": "key", "description": " The data key that will be sorted"}, {"type": "String", "name": "order", "description": " the order in which to sort. May be \"asc\" or \"desc\""}], "description": "Sorts the records based on a key of the data they hold", "guessedname": "sortBy", "guessedtype": "function"}, "push": {"chainable": "", "params": [{"type": "Array", "name": "data", "description": ""}], "description": "Adds data to the set, creating new Records", "guessedname": "push", "guessedtype": "function"}, "getCount": {"return": {"type": "", "description": "Number"}, "description": "Returns the number of records in the set", "guessedname": "getCount", "guessedtype": "function"}}, "file": "datasource.js", "guessedtype": "function", "shortname": "RecordSet", "description": "A collections of Records"}, "Button": {"name": "Button", "namespace": "", "module": "button", "events": {"textChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "textChange", "description": "Fires when the value for the configuration attribute 'text' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelContentChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelContentChange", "description": "Fires when the value for the configuration attribute 'labelContent' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelNodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelNodeChange", "description": "Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "enabledChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "enabledChange", "description": "Fires when the value for the configuration attribute 'enabled' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Button", "methods": {"enable": {"chainable": "", "description": "Enables the button", "guessedname": "enable", "guessedtype": "function"}, "disable": {"chainable": "", "description": "Disables the button", "guessedname": "disable", "guessedtype": "function"}}, "uses": ["WidgetChild"], "superclass": "Widget", "file": "button.js", "guessedtype": "property", "extends": "Widget", "shortname": "Button", "param": "{Object} config Object literal specifying widget configuration properties", "configs": {"labelContent": {"default": "null", "type": "String", "description": "Text of this button's label", "guessedname": "labelContent", "guessedtype": "property"}, "text": {"default": "''", "description": "Text inside the button", "guessedname": "text", "guessedtype": "property"}, "enabled": {"default": "true", "type": "Boolean", "description": "Enabled status of the button", "guessedname": "enabled", "guessedtype": "property"}, "labelNode": {"readonly": "", "type": "NodeList", "description": "Pointer to the <label> node related to this button", "guessedname": "labelNode", "guessedtype": "property"}}, "description": "A button widget"}, "LayoutPanel": {"name": "LayoutPanel", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A Layout Panel is a resizable block which size is constrained by the other blocks in the same container"}], "namespace": "", "module": "layout", "guessedname": "LayoutPanel", "uses": ["LayoutPanelBase", "WidgetParent", "WidgetChild"], "superclass": "Widget", "file": "layout.js", "guessedtype": "property", "extends": "Widget", "shortname": "LayoutPanel", "description": "A Layout Panel is a resizable block which size is constrained by the other blocks in the same container"}, "EventCache": {"name": "EventCache", "namespace": "", "module": "node", "guessedname": "EventCache", "methods": {"clear": {"param": "{DOMNode} obj", "params": [{"type": "DOMNode", "name": "obj", "description": ""}], "description": "Removes all listeners from a node", "guessedname": "clear", "guessedtype": "function"}, "add": {"param": "{DOMNode} obj", "params": [{"type": "DOMNode", "name": "obj", "description": ""}, {"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "fn", "description": ""}], "description": "Adds a listener to the cache", "guessedname": "add", "guessedtype": "function"}, "remove": {"param": "{DOMNode} obj", "params": [{"type": "DOMNode", "name": "obj", "description": ""}, {"type": "String", "name": "type", "description": ""}, {"type": "Function", "name": "fn", "description": ""}], "description": "Removes a method from the cache, but doesn't do anything to the node's listener", "guessedname": "remove", "guessedtype": "function"}, "flush": {"description": "Removes all listeners from all nodes recorded in the cache", "guessedname": "flush", "guessedtype": "function"}}, "static": "", "private": "", "file": "node.js", "guessedtype": "function", "shortname": "EventCache", "description": "Keeps a record of all listeners attached to the DOM in order to remove them when necessary"}, "EventTarget": {"name": "EventTarget", "constructors": [{"description": "<p>A class designed to be inherited or used by other classes to provide custom events.</p>\r\n<p>Custom events work by attaching event listeners to a class that extends EventTarget.\r\nAn event listener can be a function or an object with a method called \"handleEvent\".\r\nIf it is a function, when fired the context will be the firing object. In the case of an object, the \r\ncontext will be the object itself.</p>\r\n<p>Attaching an object to the \"*\" event type allows for a different approach:</p>\r\n<code>\r\nsomeObj.handleEvent = function (e) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;switch (e.type) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case \"someEvent\":<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case \"otherEvent\":<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something else<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br/>\r\n};<br/>\r\neventProvider.on(\"*\", someObj);\r\n</code>"}], "namespace": "", "module": "base", "methods": {"fire": {"params": [{"type": "String", "name": "eventType", "description": "\r\nExtra parameters will be passed to all event listeners"}], "description": "Fires an event, executing all its listeners", "guessedname": "fire", "guessedtype": "function"}, "on": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": " Name of the event to listen to"}, {"type": "Function", "name": "callback", "description": " Callback to execute when the event fires"}, {"type": "Object", "name": "thisp", "description": " Optional. Context on which the callback will run"}], "description": "Adds an event listener", "guessedname": "on", "guessedtype": "function"}, "unbind": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Removes and event listener", "guessedname": "unbind", "guessedtype": "function"}, "after": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": " Name of the event to listen to"}, {"type": "Function", "name": "callback", "description": " Callback to execute when the event fires"}, {"type": "Object", "name": "thisp", "description": " Optional. Context on which the callback will run"}], "description": "Listens to an 'after' event. This is a shortcut for writing on('afterEvent'), callback)", "guessedname": "after", "guessedtype": "function"}, "once": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": " Name of the event to listen to"}, {"type": "Function", "name": "callback", "description": " Callback to execute when the event fires"}, {"type": "Object", "name": "thisp", "description": " Optional. Context on which the callback will run"}], "description": "Listens to an event only once", "guessedname": "once", "guessedtype": "function"}}, "file": "jet.js", "shortname": "EventTarget", "description": "<p>A class designed to be inherited or used by other classes to provide custom events.</p>\r\n<p>Custom events work by attaching event listeners to a class that extends EventTarget.\r\nAn event listener can be a function or an object with a method called \"handleEvent\".\r\nIf it is a function, when fired the context will be the firing object. In the case of an object, the \r\ncontext will be the object itself.</p>\r\n<p>Attaching an object to the \"*\" event type allows for a different approach:</p>\r\n<code>\r\nsomeObj.handleEvent = function (e) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;switch (e.type) {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case \"someEvent\":<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case \"otherEvent\":<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//do something else<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br/>\r\n};<br/>\r\neventProvider.on(\"*\", someObj);\r\n</code>"}, "Record": {"name": "Record", "constructors": [{"params": [{"type": "Object", "name": "An", "description": " object literal"}], "description": "A record is a Hash width a unique id"}], "namespace": "", "module": "datasource", "guessedname": "Record", "methods": {"hasInstance": {"static": "", "params": [{"type": "Object", "name": "o", "description": " The object to check"}], "description": "Returns if an object is a Record", "guessedname": "hasInstance", "guessedtype": "function"}, "getData": {"description": "Returns the data of the record. Must be an object literal", "guessedname": "getData", "guessedtype": "function"}, "getId": {"return": {"type": "", "description": "Number"}, "description": "Returns the id of the record. Each record has a unique id globally.alert\r\nThis allows for easy filtering, ordering, etc of records.alert", "guessedname": "getId", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "key", "description": ""}], "description": "Shortcut for getting a value from the record's data", "guessedname": "get", "guessedtype": "function"}}, "file": "datasource.js", "guessedtype": "function", "shortname": "Record", "description": "A record is a Hash width a unique id"}, "RadioButton": {"name": "RadioButton", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A radio button"}], "namespace": "", "module": "button", "guessedname": "RadioButton", "extends": "Button", "superclass": "Button", "file": "button.js", "guessedtype": "property", "shortname": "RadioButton", "description": "A radio button"}, "Vector": {"name": "Vector", "constructors": [{"params": [{"type": "Object", "name": "configuration", "description": " key/value pairs, as in the Attribute class"}], "description": "Basic Vector class\r\nA graphic represents a figure, an SVG element or its VML counterpart"}], "namespace": "", "module": "vector", "events": {"fill-opacityChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fill-opacityChange", "description": "Fires when the value for the configuration attribute 'fill-opacity' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"on": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Adds an event listener to the vector node"}, "unbind": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}, {"type": "Function", "name": "callback", "description": ""}], "description": "Remove an event listeners from the vector node"}, "removeClass": {"chainable": "", "description": "Removes a number of classes from all nodes in the collection.\r\nTakes multiple string parameters", "guessedname": "removeClass", "guessedtype": "function"}, "hide": {"chainable": "", "description": "Hides all nodes", "guessedname": "hide", "guessedtype": "function"}, "show": {"chainable": "", "description": "Shows all nodes", "guessedname": "show", "guessedtype": "function"}, "colorHexToArray": {"return": {"type": "", "description": "Array"}, "description": "Takes a hex color and returns an array of three numbers between 0 and 255", "params": [{"type": "String", "name": "hexColor", "description": " Hex color string"}], "guessedname": "colorHexToArray", "guessedtype": "function", "final": ""}, "parseDec": {"final": "", "params": [{"type": "String", "name": "str", "description": " Decimal number candidate"}], "description": "Short for paseInt(str, 10). Doesn't fail if it isn't a number", "guessedname": "parseDec", "guessedtype": "function"}, "remove": {"chainable": "", "description": "Detach this vector from the DOM and remove all event listeners", "guessedname": "remove", "guessedtype": "function"}, "toggleClass": {"chainable": "", "params": [{"type": "String", "name": "sClass", "description": ""}], "description": "Adds/removes a certain class from all nodes in the collection", "guessedname": "toggleClass", "guessedtype": "function"}, "appendTo": {"chainable": "", "params": [{"type": "NodeList | Vector | DOMNode", "name": "target", "description": ""}], "description": "Append this vector's node to the target node", "guessedname": "appendTo", "guessedtype": "function"}, "css": {"chainable": "", "params": [{"type": "String|Hash", "name": "key", "description": ""}, {"type": "String", "name": "[value]", "description": ""}], "description": "Gets or sets CSS styles", "guessedname": "css", "guessedtype": "function"}, "colorArrayToHex": {"return": {"type": "", "description": "String"}, "description": "Takes an array of three decimal colors and returns a hex color string", "params": [{"type": "Array", "name": "arr", "description": " Color array"}], "guessedname": "colorArrayToHex", "guessedtype": "function", "final": ""}, "hasClass": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "String", "name": "className", "description": ""}], "description": "Returns true if the first node in the collection has the className CSS class", "guessedname": "hasClass", "guessedtype": "function"}, "unbindAll": {"chainable": "", "params": [{"type": "String", "name": "eventType", "description": ""}], "description": "Removes all event listeners of a certain type from the vector node"}, "decToHex": {"return": {"type": "", "description": "String"}, "description": "Transforms a decimal number into a hex string", "params": [{"type": "Number", "name": "dec", "description": " Decimal number"}], "guessedname": "decToHex", "guessedtype": "function", "final": ""}, "detach": {"description": "Detach this vector from the DOM but keep all event listeners", "guessedname": "detach", "guessedtype": "function"}, "hexToDec": {"return": {"type": "", "description": "Number"}, "description": "Transforms a hext string into a decimal number", "params": [{"type": "String", "name": "hex", "description": " Hex string"}], "guessedname": "hexToDec", "guessedtype": "function", "final": ""}, "append": {"chainable": "", "params": [{"type": "Vector", "name": "vector", "description": ""}], "description": "Append the passed vector to this vector", "guessedname": "append", "guessedtype": "function"}, "addClass": {"chainable": "", "description": "Adds a number of classes to all nodes in the collection\r\nTakes multiple string parameters", "guessedname": "addClass", "guessedtype": "function"}}, "extends": "Attribute", "superclass": "Attribute", "file": "vector.js", "shortname": "Vector", "configs": {"node": {"type": "SVG/VML node", "description": "A pointer to the vector node"}, "width": {"description": "width"}, "fill-opacity": {"description": "Opacity", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Basic Vector class\r\nA graphic represents a figure, an SVG element or its VML counterpart"}, "Vector.Circle": {"name": "Vector.Circle", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A circle vector"}], "namespace": "", "module": "vector", "events": {"cyChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cyChange", "description": "Fires when the value for the configuration attribute 'cy' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rChange", "description": "Fires when the value for the configuration attribute 'r' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cxChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cxChange", "description": "Fires when the value for the configuration attribute 'cx' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Circle", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "property", "shortname": "Vector.Circle", "configs": {"cx": {"description": "X coordinate of the circle's center", "guessedname": "cx", "guessedtype": "property"}, "cy": {"description": "Y coordinate of the circle's center", "guessedname": "cy", "guessedtype": "property"}, "r": {"description": "Radius of the circle", "guessedname": "r", "guessedtype": "property"}}, "description": "A circle vector"}, "WidgetChild": {"name": "WidgetChild", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "An extension that turns a widget into a child widget"}], "namespace": "", "module": "widget-parentchild", "events": {"parentChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parentChange", "description": "Fires when the value for the configuration attribute 'parent' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectedChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectedChange", "description": "Fires when the value for the configuration attribute 'selected' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "indexChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"toggle": {"chainable": "", "description": "Selects/unselects this widget", "guessedname": "toggle", "guessedtype": "function"}, "previous": {"returns": "Widget Widget instance", "description": "Returns the Widget's previous sibling", "guessedname": "previous", "guessedtype": "function"}, "select": {"chainable": "", "description": "Selects this widget", "guessedname": "select", "guessedtype": "function"}, "next": {"returns": "Widget Widget instance", "description": "Returns the Widget's next sibling", "guessedname": "next", "guessedtype": "function"}}, "file": "widget-parentchild.js", "shortname": "WidgetChild", "configs": {"index": {"default": "0", "type": "Number", "description": "Number representing the Widget's ordinal position in its parent Widget", "guessedname": "index", "guessedtype": "property"}, "selected": {"default": "false", "type": "Boolean", "description": "Boolean indicating if the Widget is selected", "guessedname": "selected", "guessedtype": "property"}, "parent": {"default": "null", "description": "Retrieves the parent of the Widget in the object hierarchy", "guessedname": "parent", "guessedtype": "property"}}, "description": "An extension that turns a widget into a child widget"}, "ButtonGroup": {"name": "ButtonGroup", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A group of buttons that can be styled as a pill"}], "namespace": "", "module": "button", "events": {"pillChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pillChange", "description": "Fires when the value for the configuration attribute 'pill' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ButtonGroup", "uses": ["WidgetParent"], "superclass": "Widget", "file": "button.js", "guessedtype": "property", "extends": "Widget", "shortname": "ButtonGroup", "configs": {"pill": {"default": "false", "type": "Boolean", "description": "Whether this button group should be styled as a pill", "guessedname": "pill", "guessedtype": "property"}}, "description": "A group of buttons that can be styled as a pill"}, "WidgetAlignment": {"name": "WidgetAlignment", "constructors": [{"description": "A widget extension that provides alignment support"}], "namespace": "", "module": "widget-alignment", "events": {"fixedChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fixedChange", "description": "Fires when the value for the configuration attribute 'fixed' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alignChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "file": "widget-alignment.js", "shortname": "WidgetAlignment", "configs": {"constrain": {"default": "false", "description": "If set to true, the widget will never bleed outside the viewport", "guessedname": "constrain", "guessedtype": "property"}, "fixed": {"default": "false", "description": "Whether the widget should stay fixed to the viewport or no", "guessedname": "fixed", "guessedtype": "property"}, "align": {"default": "{ points: [WidgetAlignment.TopLeft, WidgetAlignment.TopLeft], offset: [0, 0] }", "description": "Alignment configuration. An object containing three optional properties:\r\n- node: a selector or node instance of a node to use as a reference\r\n- points: an array of two values representing corners of nodes. The first one is this widget's corner to use. The second one is the target's corner\r\n- offset: an array of two values that move the widget relative to the calculated position", "guessedname": "align", "guessedtype": "property"}}, "description": "A widget extension that provides alignment support"}, "Resize": {"properties": {"reposition": {"ocnfig": "reposition", "description": "If set to true, the resize utility will automatically change the position of the \r\nnode so that is stays in place when resizing it in any direction", "default": "false", "guessedname": "reposition", "guessedtype": "property", "type": "Boolean"}, "handles": {"default": "['b', 'r', 'br']", "type": "Array", "description": "qconfig handles", "guessedname": "handles", "guessedtype": "property"}}, "name": "Resize", "namespace": "", "module": "resize", "events": {"animateChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animateChange", "description": "Fires when the value for the configuration attribute 'animate' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "endResize": {"description": "Fires when the resize action ends"}, "minHeightChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useProxyChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useProxyChange", "description": "Fires when the value for the configuration attribute 'useProxy' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize": {"params": [{"type": "Number", "name": "currentWith", "description": ""}, {"type": "Number", "name": "currentHeight", "description": ""}, {"type": "Number", "name": "offsetLeft", "description": ""}, {"type": "Number", "name": "offsetTop", "description": ""}], "description": "Fires during the resize action"}, "hiddenHandlesChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hiddenHandlesChange", "description": "Fires when the value for the configuration attribute 'hiddenHandles' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "shimChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lockedChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lockedChange", "description": "Fires when the value for the configuration attribute 'locked' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "beforeResize": {"params": [{"type": "Number", "name": "currentWith", "description": ""}, {"type": "Number", "name": "currentHeight", "description": ""}, {"type": "Number", "name": "offsetLeft", "description": ""}, {"type": "Number", "name": "offsetTop", "description": ""}], "description": "Fires before the resize action starts. If prevented, the resize action doesn't start"}, "minWidthChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Resize", "methods": {"lock": {"chainable": "", "description": "Makes the handles non interactive", "guessedname": "lock", "guessedtype": "function"}, "unlock": {"chainable": "", "description": "Makes the handles interactive", "guessedname": "unlock", "guessedtype": "function"}, "stop": {"chainable": "", "description": "Makes the resize action end prematurely", "guessedname": "stop", "guessedtype": "function"}}, "extends": "Utility", "superclass": "Utility", "file": "resize.js", "guessedtype": "property", "shortname": "Resize", "param": "{Object} config Object literal specifying configuration properties", "configs": {"node": {"required": "", "description": "The node to be resized", "guessedname": "node", "guessedtype": "property"}, "hiddenHandles": {"default": "false", "type": "Boolean", "description": "If set to true, the handles are interactive but invisible", "guessedname": "hiddenHandles", "guessedtype": "property"}, "useProxy": {"description": "Whether to use a copy of the node while resizing or not.\r\nPossible values: false, true, 'clone'", "writeonce": "", "default": "false", "guessedname": "useProxy", "guessedtype": "property", "type": "Boolean | String"}, "shim": {"default": "false", "type": "Boolean", "description": "Uses invisible elements to be able to resize the node over iframes", "guessedname": "shim", "guessedtype": "property"}, "minHeight": {"default": "0", "type": "Number", "description": "The minimum height the node can achieve", "guessedname": "minHeight", "guessedtype": "property"}, "minWidth": {"default": "0", "type": "Number", "description": "The minimum with the node can achieve", "guessedname": "minWidth", "guessedtype": "property"}, "locked": {"default": "false", "type": "Boolean", "description": "If the resize is locked the handles are not interactive", "guessedname": "locked", "guessedtype": "property"}, "constrain": {"default": "false", "type": "Boolean", "description": "If set to true, the node can't become bigger than the screen", "guessedname": "constrain", "guessedtype": "property"}, "animate": {"default": "false", "type": "Boolean", "description": "Creates an animation when the resize handle is released. Can only be set to true\r\nif 'proxy' is set to true. <strong>Requires the Anim module.</strong>", "guessedname": "animate", "guessedtype": "property"}}, "description": "Provides a utility for resizing elements"}, "Easing": {"name": "Easing", "namespace": "", "module": "anim", "guessedname": "Easing", "methods": {"easein": {"params": [{"type": "Number", "name": "x", "description": " The time variable"}, {"type": "Number", "name": "y0", "description": " The start value of the property that will be changed"}, {"type": "Number", "name": "yf", "description": " The final value of the property that will be changed"}, {"type": "Number", "name": "dur", "description": " Duration of the animation"}, {"type": "Number", "name": "pw", "description": " Easing strengh"}], "description": "An easing that's stronger at the beginning and softer at the end", "guessedname": "easein", "guessedtype": "function"}, "linear": {"params": [{"type": "Number", "name": "x", "description": " The time variable"}, {"type": "Number", "name": "y0", "description": " The start value of the property that will be changed"}, {"type": "Number", "name": "yf", "description": " The final value of the property that will be changed"}, {"type": "Number", "name": "dur", "description": " Duration of the animation"}], "description": "Linear easing", "guessedname": "linear", "guessedtype": "function"}, "sling": {"params": [{"type": "Number", "name": "x", "description": " The time variable"}, {"type": "Number", "name": "y0", "description": " The start value of the property that will be changed"}, {"type": "Number", "name": "yf", "description": " The final value of the property that will be changed"}, {"type": "Number", "name": "dur", "description": " Duration of the animation"}, {"type": "Number", "name": "pw", "description": " Easing strengh"}], "description": "An easing that goes back before going forward", "guessedname": "sling", "guessedtype": "function"}, "easeout": {"params": [{"type": "Number", "name": "x", "description": " The time variable"}, {"type": "Number", "name": "y0", "description": " The start value of the property that will be changed"}, {"type": "Number", "name": "yf", "description": " The final value of the property that will be changed"}, {"type": "Number", "name": "dur", "description": " Duration of the animation"}, {"type": "Number", "name": "pw", "description": " Easing strengh"}], "description": "An easing that's softer at the beginning and stronger at the end", "guessedname": "easeout", "guessedtype": "function"}}, "static": "", "file": "anim.js", "guessedtype": "property", "shortname": "Easing", "description": "Easing modes"}, "DataTable": {"name": "DataTable", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A DataTable is an HTML table that can be sorted and linked to a DataSource"}], "namespace": "", "module": "datatable", "events": {"recordSetChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordSetChange", "description": "Fires when the value for the configuration attribute 'recordSet' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoScrollChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoScrollChange", "description": "Fires when the value for the configuration attribute 'autoScroll' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "columnDefinitionsChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "columnDefinitionsChange", "description": "Fires when the value for the configuration attribute 'columnDefinitions' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DataTable", "methods": {"getColumn": {"return": {"type": "", "description": "Column"}, "params": [{"type": "Number | String", "name": "id", "description": ""}], "description": "Returns a column based on an index or the column's key", "guessedname": "getColumn", "guessedtype": "function"}, "onDataReturnReplaceRows": {"params": [{"type": "EventFacade", "name": "e", "description": ""}, {"type": "RecordSet", "name": "recordSet", "description": ""}], "description": "Replace all rows when the DataSource updates", "guessedname": "onDataReturnReplaceRows", "guessedtype": "function"}, "onDataReturnAddRows": {"params": [{"type": "EventFacade", "name": "e", "description": ""}, {"type": "RecordSet", "name": "newRecordSet", "description": ""}], "description": "When the DataSource updates, treat the returned data as additions to the table's recordSet", "guessedname": "onDataReturnAddRows", "guessedtype": "function"}, "getFirstTd": {"return": {"type": "", "description": "NodeList"}, "params": [{"type": "Record | HTMLTrElement | NodeList | Number", "name": "row", "description": ""}], "description": "Returns the first cell element in a row", "guessedname": "getFirstTd", "guessedtype": "function"}, "addRows": {"chainable": "", "params": [{"type": "Array", "name": "rows", "description": ""}], "description": "Adds several rows", "guessedname": "addRows", "guessedtype": "function"}, "getNextTd": {"return": {"type": "", "description": "NodeList"}, "params": [{"type": "Record | HTMLTrElement | NodeList | Number", "name": "td", "description": ""}], "description": "Returns the next cell element in a row based on the one passed as a parameter", "guessedname": "getNextTd", "guessedtype": "function"}, "addRow": {"chainable": "", "params": [{"type": "Record|HTMLRowElement|Array", "name": "row", "description": ""}], "description": "Adds a row", "guessedname": "addRow", "guessedtype": "function"}, "getNextTr": {"return": {"type": "", "description": "NodeList"}, "params": [{"type": "Record | HTMLTrElement | NodeList | Number", "name": "tr", "description": ""}], "description": "Returns the next html row element base on the one passed as a parameter", "guessedname": "getNextTr", "guessedtype": "function"}, "getFirstTr": {"return": {"type": "", "description": "NodeList"}, "description": "Returns the first html row element in the table", "guessedname": "getFirstTr", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "datatable.js", "guessedtype": "property", "shortname": "DataTable", "configs": {"recordSet": {"type": "RecordSet", "description": "The data table's associated recordSet", "guessedname": "recordSet", "guessedtype": "property"}, "columnDefinitions": {"required": "", "type": "Array", "description": "An array mapping record keys to columns", "guessedname": "columnDefinitions", "guessedtype": "property"}, "autoScroll": {"default": "false", "description": "Scroll the datatable automatically to the bottom when the rows change and the scroll was already at the bottom", "guessedname": "autoScroll", "guessedtype": "property"}}, "description": "A DataTable is an HTML table that can be sorted and linked to a DataSource"}, "History": {"name": "History", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "History management class"}], "namespace": "", "module": "history", "events": {"firstLoadChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstLoadChange", "description": "Fires when the value for the configuration attribute 'firstLoad' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "encodeURIChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "encodeURIChange", "description": "Fires when the value for the configuration attribute 'encodeURI' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "baseTitleChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "baseTitleChange", "description": "Fires when the value for the configuration attribute 'baseTitle' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "change": {"params": [{"type": "Hash", "name": "hashData", "description": " A hash with the URI data"}, {"type": "Object", "name": "Additional", "description": " data associated with the current state"}], "description": "Fires when the history changes"}, "blankURLChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "blankURLChange", "description": "Fires when the value for the configuration attribute 'blankURL' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "History", "methods": {"initialize": {"chainable": "", "description": "Initialize our DHTML history. You must call this after the page is finished loading", "guessedname": "initialize", "guessedtype": "function"}, "changeTitle": {"chainable": "", "description": "Change the current HTML title", "guessedname": "changeTitle", "guessedtype": "function"}, "go": {"chainable": "", "params": [{"type": "String", "name": "newLocation", "description": " required - This will be the #hash value in the URL. Users can bookmark it. It will persist across sessions, so\r\nyour application should be able to restore itself to a specific state based on just this value. It\r\nshould be either a simple keyword for a viewstate or else a pseudo-querystring."}, {"type": "Hash", "name": "historyData", "description": " optional - This is for complex data that is relevant only to the current browsing session. It will be available\r\nto your application until the browser is closed. If the user comes back to a bookmarked history point\r\nduring a later session, this data will no longer be available. Don't rely on it for application\r\nre-initialization from a bookmark."}, {"type": "String", "name": "historyData.newTitle", "description": " optional - This will swap out the html <code><title></code> attribute with a new value. \r\nIf you have set a baseTitle using the options bundle, the value will be plugged into the baseTitle by swapping out the @@@ replacement param."}], "description": "Add a history point", "guessedname": "go", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "history.js", "guessedtype": "function", "shortname": "History", "configs": {"baseTitle": {"type": "String", "description": "pattern for title changes. Example: \"Armchair DJ [@@@]\" - @@@ will be replaced", "guessedname": "baseTitle", "guessedtype": "property"}, "firstLoad": {"readonly": "", "type": "Boolean", "description": "Whether this is the first time the History loaded or not", "guessedname": "firstLoad", "guessedtype": "property"}, "blankURL": {"default": "\"blank.html?\"", "type": "String", "description": "URL for the blank html file we use for IE; can be overridden via the options bundle. \r\nOtherwise it must be served in same directory as this library", "guessedname": "blankURL", "guessedtype": "property"}, "encodeURI": {"type": "Boolean", "description": "Whether to encode the URI or not", "guessedname": "encodeURI", "guessedtype": "property"}}, "description": "History management class"}, "Vector.Ellipse": {"name": "Vector.Ellipse", "configs": {"cy": {"description": "Y coordinate of the ellipse's center", "guessedname": "cy", "guessedtype": "property"}, "cx": {"description": "X coordinate of the ellipse's center", "guessedname": "cx", "guessedtype": "property"}, "ry": {"description": "Vertical radius length", "guessedname": "ry", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "An ellipse"}], "namespace": "", "module": "vector", "events": {"cyChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cyChange", "description": "Fires when the value for the configuration attribute 'cy' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cxChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cxChange", "description": "Fires when the value for the configuration attribute 'cx' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ryChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ryChange", "description": "Fires when the value for the configuration attribute 'ry' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Ellipse", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "property", "shortname": "Vector.Ellipse", "properties": {"rx": {"cponfig": "rx", "description": "Horizontal radius length", "guessedname": "rx", "guessedtype": "property"}}, "description": "An ellipse"}, "Cell": {"name": "Cell", "constructors": [{"description": "A cell in a DataTable"}], "namespace": "", "module": "datatable", "events": {"valueChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tdChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tdChange", "description": "Fires when the value for the configuration attribute 'td' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "recordChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordChange", "description": "Fires when the value for the configuration attribute 'record' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Cell", "extends": "Base", "superclass": "Base", "file": "datatable.js", "guessedtype": "property", "shortname": "Cell", "configs": {"record": {"guessedtype": "property", "required": "", "description": "The cell's record", "guessedname": "record", "writeonce": ""}, "td": {"guessedtype": "property", "required": "", "description": "The cell's td", "guessedname": "td", "writeonce": ""}, "value": {"guessedtype": "property", "required": "", "description": "The cell's value", "guessedname": "value", "writeonce": ""}}, "description": "A cell in a DataTable"}, "TreeView": {"name": "TreeView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A labeled tree"}], "namespace": "", "module": "treeview", "guessedname": "TreeView", "uses": ["WidgetParent"], "superclass": "Widget", "file": "treeview.js", "guessedtype": "property", "extends": "Widget", "shortname": "TreeView", "events": {"node:expand": {"params": [{"type": "Node", "name": "The", "description": " node that initiated the action"}], "description": "Fires when a node is expanded. Preventing the default behavior will\r\nstop the node from expanding"}, "node:collapse": {"params": [{"type": "Node", "name": "The", "description": " node that initiated the action"}], "description": "Fires when a node is collapsed. Preventing the default behavior will\r\nstop the node from collapsing"}}, "description": "A labeled tree"}, "TabView": {"name": "TabView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A view of tabs"}], "namespace": "", "module": "tabview", "events": {"panelContainerChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "panelContainerChange", "description": "Fires when the value for the configuration attribute 'panelContainer' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "TabView", "uses": ["WidgetParent"], "superclass": "Widget", "file": "tabview.js", "guessedtype": "property", "extends": "Widget", "shortname": "TabView", "configs": {"panelContainer": {"guessedtype": "property", "type": "NodeList", "description": "Node that contains all tab panels", "guessedname": "panelContainer", "writeonce": ""}}, "description": "A view of tabs"}, "Vector.Path": {"name": "Vector.Path", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "An Path vector"}], "namespace": "", "module": "vector", "events": {"y2Change": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "y2Change", "description": "Fires when the value for the configuration attribute 'y2' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Path", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "property", "shortname": "Vector.Path", "configs": {"y2": {"description": "Y coordinate of the line's ending point", "guessedname": "d", "guessedtype": "property"}}, "description": "An Path vector"}, "VectorView": {"name": "VectorView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A canvas for Vectors"}], "namespace": "", "module": "vector", "guessedname": "VectorView", "methods": {"text": {"return": {"type": "", "description": "Vector.Text"}, "params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draw text in this vector view", "guessedname": "text", "guessedtype": "function"}, "image": {"return": {"type": "", "description": "Vector.Image"}, "params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draw an image in this vector view", "guessedname": "image", "guessedtype": "function"}, "ellipse": {"return": {"type": "", "description": "Vector.Ellipse"}, "params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draw an ellipse in this vector view", "guessedname": "ellipse", "guessedtype": "function"}, "clear": {"chainable": "", "description": "Remove all vectors from this vector view", "guessedname": "clear", "guessedtype": "function"}, "path": {"return": {"type": "", "description": "Vector.Path"}, "params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draw a path in this vector view", "guessedname": "path", "guessedtype": "function"}, "line": {"return": {"type": "", "description": "Vector.Line"}, "params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draw a line in this vector view", "guessedname": "line", "guessedtype": "function"}, "circle": {"return": {"type": "", "description": "Vector.Circle"}, "params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draw a circle in this vector view", "guessedname": "circle", "guessedtype": "function"}, "rectangle": {"return": {"type": "", "description": "Vector.Rectangle"}, "params": [{"type": "Object", "name": "config", "description": ""}], "description": "Draw a rectangle in this vector view", "guessedname": "rectangle", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "vector.js", "guessedtype": "property", "shortname": "VectorView", "description": "A canvas for Vectors"}, "Attribute": {"name": "Attribute", "constructors": [{"description": "Provides get() and set() methods, along with getters, setters and options for configuration attributres"}], "namespace": "", "module": "base", "methods": {"addAttr": {"chainable": "", "params": [{"type": "String", "name": "attrName", "description": ""}, {"type": "Hash", "name": "config", "description": ""}], "description": "Adds a configuration attribute, along with its options", "guessedname": "addAttr", "guessedtype": "function"}, "getAttrs": {"return": {"type": "Hash", "description": ""}, "description": "Returns a key/value paired object with all attributes", "guessedname": "getAttrs", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "attrName", "description": ""}], "description": "Returns a configuration attribute", "guessedname": "get", "guessedtype": "function"}, "set": {"chainable": "", "params": [{"type": "String", "name": "attrName", "description": ""}, {"type": "Object", "name": "attrValue", "description": ""}], "description": "Sets a configuration attribute", "guessedname": "set", "guessedtype": "function"}, "addAttrs": {"chainable": "", "params": [{"type": "Hash", "name": "config", "description": " - key/value pairs of attribute names and configs"}], "description": "Adds several configuration attributes", "guessedname": "addAttrs", "guessedtype": "function"}, "unset": {"chainable": "", "params": [{"type": "String", "name": "attrName", "description": ""}], "description": "Unsets a configuration attribute", "guessedname": "unset", "guessedtype": "function"}}, "extends": "EventTarget", "superclass": "EventTarget", "file": "jet.js", "shortname": "Attribute", "description": "Provides get() and set() methods, along with getters, setters and options for configuration attributres"}, "Image": {"name": "Image", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying image configuration properties"}], "description": "The Image class enhances the native class"}], "namespace": "", "module": "imageloader", "events": {"timeoutChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeoutChange", "description": "Fires when the value for the configuration attribute 'timeout' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "load": {"description": "Fires when the image finished loading successfully"}, "complete": {"description": "Fires when the image finished loading, successfully or not"}, "imageChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageChange", "description": "Fires when the value for the configuration attribute 'image' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "error": {"description": "Fires if the image didn't load successfully"}, "typeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadedChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadedChange", "description": "Fires when the value for the configuration attribute 'loaded' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcChange", "description": "Fires when the value for the configuration attribute 'src' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Img", "methods": {"load": {"chainable": "", "description": "Start loading the image"}, "setAsBackground": {"chainable": "", "params": [{"type": "DOMNode | NodeList", "name": "node", "description": " Which node to set the image as background of"}], "description": "Set the image as a background once it loaded", "guessedname": "setAsBackground", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "property", "shortname": "Image", "configs": {"node": {"readonly": "", "type": "NodeList", "description": "A NodeList with the image node", "guessedname": "node", "guessedtype": "property"}, "src": {"description": "URI of the image to load", "writeonce": "", "required": "", "guessedname": "src", "guessedtype": "property", "type": "String"}, "image": {"description": "A pointer to the actual Image object", "guessedname": "image", "guessedtype": "property"}, "timeout": {"default": "5000", "type": "Number (ms)", "description": "Time the image can spend loading before firing the timeout event", "guessedname": "timeout", "guessedtype": "property"}, "loaded": {"type": "Boolean", "description": "Specifies if the image has finished loading or not", "guessedname": "loaded", "guessedtype": "property"}, "type": {"type": "String", "description": "The image type. Used to specify if an image is PNG", "guessedname": "type", "guessedtype": "property"}}, "description": "The Image class enhances the native class"}, "DataSource.Get": {"name": "DataSource.Get", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A Get DataSource that uses JSON for getting data across domains"}], "namespace": "", "module": "datasource", "events": {"timeoutChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeoutChange", "description": "Fires when the value for the configuration attribute 'timeout' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "urlChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "urlChange", "description": "Fires when the value for the configuration attribute 'url' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "jsonCallbackParamChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "jsonCallbackParamChange", "description": "Fires when the value for the configuration attribute 'jsonCallbackParam' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Get", "extends": "DataSource", "superclass": "DataSource", "file": "datasource.js", "guessedtype": "property", "shortname": "DataSource.Get", "configs": {"url": {"required": "", "type": "String", "description": "Url from which to fetch the data", "guessedname": "url", "guessedtype": "property"}, "timeout": {"default": "10000", "type": "Number", "description": "Ms after which the request is considered to have timed out", "guessedname": "timeout", "guessedtype": "property"}, "jsonCallbackParam": {"default": "\"p\"", "type": "String", "description": "Name of the URL parameter that defines the name of the JSONP callback", "guessedname": "jsonCallbackParam", "guessedtype": "property"}}, "description": "A Get DataSource that uses JSON for getting data across domains"}, "SimpleDialog": {"name": "SimpleDialog", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A SimpleDialog is a Panel with simple form options and a button row instead of the footer"}], "namespace": "", "module": "container", "events": {"buttonsChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonsChange", "description": "Fires when the value for the configuration attribute 'buttons' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "SimpleDialog", "extends": "Panel", "superclass": "Panel", "file": "container.js", "guessedtype": "property", "shortname": "SimpleDialog", "configs": {"buttons": {"default": "[]", "type": "Array", "description": "An array of button configuration objects", "guessedname": "buttons", "guessedtype": "property"}}, "description": "A SimpleDialog is a Panel with simple form options and a button row instead of the footer"}, "Module": {"name": "Module", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A module is a basic container with header, body and footer"}], "namespace": "", "module": "container", "guessedname": "Module", "extends": "Widget", "superclass": "Widget", "file": "container.js", "guessedtype": "property", "shortname": "Module", "configs": {"body": {"writeonce": "", "description": "A pointer to the body node", "guessedname": "body", "guessedtype": "property"}, "footerContent": {"type": "DOM Node | String | NodeList", "description": "The footer of the module.\r\nIf set to a string a node is creating and the string is set to its innerHTML", "guessedname": "footerContent", "guessedtype": "property"}, "headerContent": {"type": "DOM Node | String | NodeList", "description": "The header of the module.\r\nIf set to a string a node is creating and the string is set to its innerHTML", "guessedname": "headerContent", "guessedtype": "property"}, "header": {"writeonce": "", "description": "A pointer to the header node", "guessedname": "header", "guessedtype": "property"}, "bodyContent": {"default": "\"\"", "type": "DOM Node | String | NodeList", "description": "The body of the module.\r\nIf set to a string a node is creating and the string is set to its innerHTML\r\nA body is always present in a Module", "guessedname": "bodyContent", "guessedtype": "property"}, "footer": {"writeonce": "", "description": "A pointer to the footer node", "guessedname": "footer", "guessedtype": "property"}}, "description": "A module is a basic container with header, body and footer"}, "ProgressBar": {"file": "progressbar.js", "description": "A progressbar for informing the user of the status of loading resources.\r\nOther uses include equalizers, ratings, etc", "namespace": "", "module": "progressbar", "events": {"durationChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animateChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animateChange", "description": "Fires when the value for the configuration attribute 'animate' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "valueChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "barChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "barChange", "description": "Fires when the value for the configuration attribute 'bar' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minMvalueChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minMvalueChange", "description": "Fires when the value for the configuration attribute 'minMvalue' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxMvalueChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxMvalueChange", "description": "Fires when the value for the configuration attribute 'maxMvalue' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "param": "{Object} config Object literal specifying configuration properties", "guessedname": "ProgressBar", "guessedtype": "property", "shortname": "ProgressBar", "configs": {"direction": {"default": "\"ltr\"", "guessedtype": "property", "description": "Direction in which the progressbar increases its size. May be \"ltr\", \"ttb\" or \"btt\"", "guessedname": "direction", "writeonce": ""}, "bar": {"readonly": "", "description": "The DOM element that represents the bar in the progressbar", "guessedname": "bar", "guessedtype": "property"}, "minMvalue": {"default": "0", "description": "Minimum value that the progressbar data will take", "guessedname": "minValue", "guessedtype": "property"}, "maxMvalue": {"default": "100", "description": "Maximum value that the progressbar data will take", "guessedname": "maxValue", "guessedtype": "property"}, "value": {"default": "0", "description": "Current value the progressbar is taking", "guessedname": "value", "guessedtype": "property"}, "duration": {"default": "500 ms", "description": "Duration of the animation in case it is being used", "guessedname": "duration", "guessedtype": "property"}, "easing": {"default": "linear", "description": "Easing to use when animating", "guessedname": "easing", "guessedtype": "property"}, "animate": {"default": "false", "guessedtype": "property", "description": "Whether to animate the progressbar progress. The Anim module must be present", "guessedname": "animate", "writeonce": ""}}, "name": "ProgressBar"}, "MenuItem": {"name": "MenuItem", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A menu item"}], "namespace": "", "module": "menu", "events": {"labelContentChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelContentChange", "description": "Fires when the value for the configuration attribute 'labelContent' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelNodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelNodeChange", "description": "Fires when the value for the configuration attribute 'labelNode' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "MenuItem", "uses": ["WidgetParent, WidgetChild"], "superclass": "Widget", "file": "menu.js", "guessedtype": "property", "extends": "Widget", "shortname": "MenuItem", "configs": {"labelContent": {"description": "The content of the Menu's label", "guessedname": "labelContent", "guessedtype": "property"}, "labelNode": {"default": "<span/>", "description": "A pointer to the node containing the label", "guessedname": "labelNode", "guessedtype": "property"}}, "description": "A menu item"}, "Vector.Image": {"name": "Vector.Image", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "An Image vector"}], "namespace": "", "module": "vector", "guessedname": "ImageVector", "extends": "Vector", "superclass": "Vector", "file": "vector.js", "guessedtype": "property", "shortname": "Vector.Image", "description": "An Image vector"}, "Vector.RoundedRectangle": {"name": "Vector.RoundedRectangle", "constructors": [{"params": [{"type": "Object", "name": "config", "description": ""}], "description": "A rectangle with rounded corners"}], "namespace": "", "module": "vector", "guessedname": "RoundedRectangle", "extends": "Rectangle", "superclass": "Rectangle", "file": "vector.js", "guessedtype": "property", "shortname": "Vector.RoundedRectangle", "description": "A rectangle with rounded corners"}, "DataSource": {"name": "DataSource", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Base class for all data sources. The DataSource class shouldn't be used directly"}], "namespace": "", "methods": {"sendRequest": {"chainable": "", "params": [{"type": "Object", "name": "request", "description": ""}, {"type": "Boolean", "name": "ignoreCache", "description": ""}], "description": "Sends a request", "guessedname": "sendRequest", "guessedtype": "function"}, "handleRequest": {"description": "The logic for the chosen source type. Should be overwritten when extending the DataSourceClass", "guessedname": "handleRequest", "guessedtype": "function"}, "onBeforeParse": {"chainable": "", "params": [{"type": "Function", "name": "callback", "description": ""}], "description": "Adds an event listener to the \"beforeParse\" event", "guessedname": "onBeforeParse", "guessedtype": "function"}}, "module": "datasource", "events": {"recordSetChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordSetChange", "description": "Fires when the value for the configuration attribute 'recordSet' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "responseTypeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "responseTypeChange", "description": "Fires when the value for the configuration attribute 'responseType' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "responseSchemaChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "responseSchemaChange", "description": "Fires when the value for the configuration attribute 'responseSchema' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "initialRequestChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "initialRequestChange", "description": "Fires when the value for the configuration attribute 'initialRequest' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DataSource", "protected": "", "extends": "Utility", "superclass": "Utility", "file": "datasource.js", "guessedtype": "property", "shortname": "DataSource", "configs": {"recordSet": {"guessedtype": "property", "type": "RecordSet", "description": "This datasource's associated recordset", "guessedname": "recordSet", "writeonce": ""}, "responseType": {"required": "", "description": "The expected response type ('xml', 'jsarray', 'json', 'text')", "guessedname": "responseType", "guessedtype": "property"}, "responseSchema": {"required": "", "type": "Hash", "description": "<p>The schema by which to parse the response data. May be:</p>\r\n<p><strong>DataSource.responseType.JSARRAY schema</strong><br/>\r\nA JSARRAY response type assumes the following response shape:</p>\r\n<code>//All records are listed as an array<br/>\r\n[<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;['value1', 'value2', 'value3'], //one record<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;['another1', 'another2', 'another3'] //another record<br/>\r\n]</code>\r\n<p></p>\r\n<p><strong>DataSource.responseType.TEXT schema</strong><br/>\r\nThis schema essentially splits the string and then acts as if it where a DataSource.responseType.JSARRAY.<br/>\r\nMust define a <strong>fieldDelim</strong> property. Example (comma separated value):</p>\r\n<code>responseSchema: {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;fieldDelim: \",\"<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;fields: [\"firstField\", \"secondField\"]<br/>\r\n}</code>\r\n<p></p>\r\n<p><strong>DataSource.responseType.JSON schema</strong><br/>\r\nExample:</p>\r\n<code>responseSchema = {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;resultList : \"Response.Results\", // String pointer to result data<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;// Field order doesn't matter and not all data is required to have a field<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;fields : [<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ key: \"id\" },                    // simple location<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ key: \"obj\" }<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;]<br/>\r\n}</code>\r\n<p></p>\r\n<p><strong>DataSource.responseType.XML schema</strong><br/>\r\nExample:</p> \r\n<code>responseSchema: {<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;resultNode: \"rootNode\", // every result field will be looked for between this node's children<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;fields: [<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ key: \"keyName\", node: \"nodeName\" }, // in this case, the value of the field will be the node's value<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ key: \"otherKey\", node: \"otherNode\", attr: \"type\" }, // in this other case, the field value will be the \"type\" attribute<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ key: \"aNumber\", node: \"someNode\", parser: \"parseFloat\" } // this value will be parsed as a Float<br/>\r\n&nbsp;&nbsp;&nbsp;&nbsp;]<br/>\r\n}</code>", "guessedname": "responseSchema", "guessedtype": "property"}, "initialRequest": {"type": "Object", "description": "Data to send in the automatic initial request", "guessedname": "initialRequest", "guessedtype": "property"}}, "description": "Base class for all data sources. The DataSource class shouldn't be used directly"}, "Tab": {"name": "Tab", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "A tab instance has a label and a panel"}], "namespace": "", "module": "tabview", "events": {"panelContentChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "panelContentChange", "description": "Fires when the value for the configuration attribute 'panelContent' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelContentChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelContentChange", "description": "Fires when the value for the configuration attribute 'labelContent' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "panelNodeChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "panelNodeChange", "description": "Fires when the value for the configuration attribute 'panelNode' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerEventChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerEventChange", "description": "Fires when the value for the configuration attribute 'triggerEvent' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hrefChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hrefChange", "description": "Fires when the value for the configuration attribute 'href' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Tab", "uses": ["WidgetChild"], "superclass": "Widget", "file": "tabview.js", "guessedtype": "property", "extends": "Widget", "shortname": "Tab", "configs": {"triggerEvent": {"default": "'click'", "type": "String", "description": "Event that triggers the selection of this tab", "guessedname": "triggerEvent", "guessedtype": "property"}, "labelContent": {"description": "Gets/sets the content of the tab's label", "guessedname": "labelContent", "guessedtype": "property"}, "panelContent": {"description": "Gets/sets the content of the tab's panel", "guessedname": "panelContent", "guessedtype": "property"}, "href": {"default": "'#'", "guessedtype": "property", "description": "Href attribute for this tab's label. Useful for progressive enhancement", "guessedname": "href", "writeonce": ""}, "panelNode": {"writeonce": "", "description": "The element to use as a panel", "guessedname": "panelNode", "guessedtype": "property"}}, "description": "A tab instance has a label and a panel"}, "DataSource.XDR": {"name": "DataSource.XDR", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "Cross-domain data source"}], "namespace": "", "module": "datasource", "events": {"urlChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "urlChange", "description": "Fires when the value for the configuration attribute 'url' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "XDR", "extends": "DataSource", "superclass": "DataSource", "file": "datasource.js", "guessedtype": "property", "shortname": "DataSource.XDR", "configs": {"url": {"required": "", "type": "String", "description": "Url from which to fetch the data", "guessedname": "url", "guessedtype": "property"}}, "description": "Cross-domain data source"}, "PanelBase": {"name": "PanelBase", "constructors": [{"description": "A panel is an overlay that resembles an OS window without actually being one,\r\nto the problems they have (stop javascript execution, etc)"}], "namespace": "", "module": "container", "guessedname": "PanelBase", "file": "container.js", "guessedtype": "function", "shortname": "PanelBase", "configs": {"close": {"default": "true", "type": "Boolean", "description": "If true, a close button is added to the panel that hides it when clicked", "guessedname": "close", "guessedtype": "property"}, "shadow": {"default": "true", "description": "If true, the panel shows a shadow", "guessedname": "shadow", "guessedtype": "property"}, "underlay": {"readonly": "", "description": "The underlay is inserted after the contentBox to allow for a more complex design", "guessedname": "underlay", "guessedtype": "property"}}, "description": "A panel is an overlay that resembles an OS window without actually being one,\r\nto the problems they have (stop javascript execution, etc)"}, "DataSource.Local": {"name": "DataSource.Local", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "A Local DataSource uses local variables"}], "namespace": "", "module": "datasource", "events": {"localDataChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "localDataChange", "description": "Fires when the value for the configuration attribute 'localData' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Local", "extends": "DataSource", "superclass": "DataSource", "file": "datasource.js", "guessedtype": "property", "shortname": "DataSource.Local", "configs": {"localData": {"required": "", "description": "The object to use as a datasource", "guessedname": "localData", "guessedtype": "property"}}, "description": "A Local DataSource uses local variables"}, "Array": {"name": "Array", "namespace": "", "module": "io", "guessedname": "ArrayHelper", "methods": {"indexOf": {"return": {"type": "Number", "description": ""}, "params": [{"type": "Object", "name": "needle", "description": ""}, {"type": "Array", "name": "haystack", "description": ""}], "description": "Returns the index of the first occurence of needle", "guessedname": "indexOf", "guessedtype": "function"}, "inArray": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "needle", "description": ""}, {"type": "Array", "name": "haystack", "description": ""}], "description": "Returns whether needle is present in haystack", "guessedname": "inArray", "guessedtype": "function"}, "remove": {"params": [{"type": "Object", "name": "needle", "description": ""}, {"type": "Array", "name": "haystack", "description": ""}], "description": "Searchs an haystack and removes the needle if found", "guessedname": "remove", "guessedtype": "function"}, "each": {"params": [{"type": "Array", "name": "arr", "description": ""}, {"type": "Function", "name": "fn", "description": " callback"}, {"type": "Object", "name": "thisp", "description": " sets up the <b>this</b> keyword inside the callback"}], "description": "Iterates through an array"}}, "static": "", "file": "jet.js", "guessedtype": "property", "shortname": "Array", "description": "Utilities for working with Arrays"}, "UA": {"name": "UA", "namespace": "", "module": "io", "guessedname": "UA", "static": "", "file": "jet.js", "guessedtype": "function", "shortname": "UA", "properties": {"opera": {"description": "true if the browser is Opera", "guessedname": "opera", "guessedtype": "property"}, "ie": {"description": "If the browser is Internet Explorer, this property is equal to the IE version. If not, it is false", "guessedname": "ie", "guessedtype": "property"}, "mac": {"description": "true if the operating system is Apple OSX", "guessedname": "mac", "guessedtype": "property"}, "win": {"description": "true if the operating system is Windows", "guessedname": "win", "guessedtype": "property"}, "webkit": {"description": "true if the browser uses the Webkit rendering engine (ie: Safari, Chrome)", "guessedname": "webkit", "guessedtype": "property"}, "gecko": {"description": "true if the browser is based on the Gecko rendering engine (ie: Firefox)", "guessedname": "gecko", "guessedtype": "property"}}, "description": "Browser sniffing"}, "ImageLoader": {"name": "ImageLoader", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying configuration properties"}], "description": "Handles loading of multiple images"}], "namespace": "", "module": "imageloader", "events": {"image:timeout": {"params": [{"type": "Image", "name": "the", "description": " image that fired the event"}], "description": "Fires when each image fires its timeout event"}, "image:complete": {"params": [{"type": "Image", "name": "the", "description": " image that fired the event"}], "description": "Fires when each image fires its complete event"}, "image:error": {"params": [{"type": "Image", "name": "the", "description": " image that fired the event"}], "description": "Fires when each image fires its error event"}, "srcsChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcsChange", "description": "Fires when the value for the configuration attribute 'srcs' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "progress": {"params": [{"type": "Number", "name": "percentage", "description": " completed"}], "description": "Fires each time an image loads"}, "image:load": {"params": [{"type": "Image", "name": "the", "description": " image that fired the event"}], "description": "Fires when each image fires its load event"}, "complete": {"description": "Fires when all images loaded"}}, "guessedname": "ImageLoader", "methods": {"load": {"chainable": "", "description": "Loads all images whose srcs where specified", "guessedname": "load", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "property", "shortname": "ImageLoader", "configs": {"srcs": {"type": "Array", "description": "An array of image URIs", "guessedname": "srcs", "guessedtype": "property"}}, "description": "Handles loading of multiple images"}, "Utility": {"name": "Utility", "configs": {"cssPrefix": {"default": "Utility.CSS_PREFIX", "writeonce": "", "guessedname": "cssPrefix", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties"}], "description": "Basic class for all utilities"}], "namespace": "", "module": "base", "methods": {"destroy": {"description": "Calls itself when the window unloads. Allows for easier memory cleanup", "guessedname": "destroy", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "jet.js", "shortname": "Utility", "events": {"destroy": {"description": "Preventing the default behavior will stop the destroy process"}, "cssPrefixChange": {"params": [{"type": "EventFacade", "name": "event", "description": "An EventFacade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cssPrefixChange", "description": "Fires when the value for the configuration attribute 'cssPrefix' is changed. You can listen for the event using the <a href=\"EventTarget.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"EventTarget.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Basic class for all utilities"}}, "version": "0.1", "modules": {"widget-stack": {"description": "Provides a WidgetStack extension for Widget that controls zIndex and provides support for overlaying on top of windowed elements", "submodules": [], "classlist": ["WidgetStack"], "filelist": [], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "widget-stack"}, "widget-parentchild": {"description": "A module declaring extensions for parent/child relationships between nodes", "submodules": [], "classlist": ["WidgetParent", "WidgetChild"], "filelist": ["widget-sandbox.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "widget-parentchild"}, "io": {"description": "Handles AJAX, JSONP and XSLT requests", "submodules": [], "classlist": ["IO", "Lang", "Array", "Hash", "UA", "Get", "Core", "jet"], "filelist": ["jet.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "io"}, "paginator": {"description": "Paginator widget", "submodules": [], "classlist": ["Paginator"], "filelist": ["progressbar.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "paginator"}, "container": {"description": "Contains widgets that act as containers, windows, dialogs", "submodules": [], "classlist": ["Module", "Overlay", "Tooltip", "PanelBase", "Panel", "StaticPanel", "SimpleDialog"], "filelist": ["cookie.js"], "subdata": {}, "requires": "base,widget-alignment,widget-stack\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "container"}, "log": {"description": "Base structure for logging", "submodules": [], "classlist": ["Log"], "filelist": ["menu.js"], "subdata": {}, "requires": "jet\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "log"}, "menu": {"description": "OS-like menus for navigation", "submodules": [], "classlist": ["MenuItem", "Menu"], "filelist": ["node.js"], "subdata": {}, "requires": "base,container\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "menu"}, "widget-sandbox": {"description": "Provides an extension that sandboxes a widget by moving its contentBox into a frame", "submodules": [], "classlist": ["Frame", "Sandbox"], "filelist": ["widget-stack.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "widget-sandbox"}, "swf": {"description": "SWFObject adapted to Jet", "submodules": [], "classlist": [], "filelist": ["tabview.js"], "subdata": {}, "requires": "jet\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "swf"}, "json": {"description": "Adds JSON support when needed. If JSON is found natively, this module is not loaded but the $.JSON object is still found if needed", "submodules": [], "classlist": ["JSON"], "filelist": ["layout.js"], "subdata": {}, "requires": "jet\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "json"}, "dragdrop": {"description": "Provides functionality for dragging and dropping elements", "submodules": [], "classlist": ["Drag", "DragDrop"], "filelist": ["history.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "dragdrop"}, "io-xdr": {"description": "Adds functionality to make cross-domain ajax calls", "submodules": [], "classlist": [], "filelist": ["io.js"], "subdata": {}, "requires": "base,io\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "io-xdr"}, "datasource": {"description": "DataSources are different ways of accessing data and parsing it into an schema", "submodules": [], "classlist": ["Record", "RecordSet", "DataSource", "DataSource.Get", "DataSource.Ajax", "DataSource.XDR", "DataSource.Local"], "filelist": ["datatable.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "datasource"}, "node": {"description": "Node collections and DOM abstraction", "submodules": [], "classlist": ["EventCache", "DOM", "NodeList"], "filelist": ["paginator.js"], "subdata": {}, "requires": "ua\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "node"}, "anim": {"description": "Animations", "submodules": [], "classlist": ["Easing", "TimeFrame", "Tween"], "filelist": ["anim.js", "button.js"], "subdata": {}, "requires": "node\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "anim"}, "base": {"description": "The Base module provides base classes for Utilities and Widgets", "submodules": [], "classlist": ["OOP", "EventTarget", "Attribute", "Base", "Utility", "Widget", "Mouse"], "filelist": ["json.js"], "subdata": {}, "requires": "node\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "base"}, "cookie": {"description": "Provides abstracion for easier use of cookies", "submodules": [], "classlist": ["Cookie"], "filelist": ["datasource.js"], "subdata": {}, "requires": "jet\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "cookie"}, "layout": {"description": "Creates a resizable layout", "submodules": [], "classlist": ["LayoutPanelBase", "LayoutPanel", "Layout"], "filelist": ["log.js"], "subdata": {}, "requires": "base,resize,widget-parentchild\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "layout"}, "datatable": {"description": "Provides a DataTable widget that can be sorted and linked to a DataSource", "submodules": [], "classlist": ["Cell", "Column", "DataTable"], "filelist": ["dragdrop.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "datatable"}, "resize": {"description": "Provides a utility for resizing elements", "submodules": [], "classlist": ["Resize"], "filelist": ["sizzle.js", "swf.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "resize"}, "widget-alignment": {"description": "A widget extension that provides alignment support", "submodules": [], "classlist": ["WidgetAlignment"], "filelist": ["widget-parentchild.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "widget-alignment"}, "tabview": {"description": "A TabView", "submodules": [], "classlist": ["Tab", "TabView"], "filelist": ["treeview.js"], "subdata": {}, "requires": "base,widget-parentchild\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "tabview"}, "button": {"description": "Different kinds of buttons and form elements", "submodules": [], "classlist": ["Button", "ToggleButton", "ButtonGroup", "ComboOption", "ComboBox", "RadioButton", "RadioGroup", "CheckBox", "CheckBoxGroup"], "filelist": ["container.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "button"}, "progressbar": {"description": "A progressbar for informing the user of the status of loading resources. Other uses include equalizers, ratings, etc", "submodules": [], "classlist": ["ProgressBar"], "filelist": ["resize.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "progressbar"}, "vector": {"description": "Provides cross-browser vector graphics implementation based on SVG and VML", "submodules": [], "classlist": ["Vector", "Vector.Rectangle", "Vector.RoundedRectangle", "Vector.Ellipse", "Vector.Circle", "Vector.Line", "Vector.Path", "Vector.Text", "Vector.Image", "VectorView"], "filelist": ["widget-alignment.js"], "subdata": {}, "requires": "base,anim\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "vector"}, "imageloader": {"description": "Provides functionality for preloading images and fixing PNGs in IE", "submodules": [], "classlist": ["Image", "ImageLoader"], "filelist": ["io-xdr.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "imageloader"}, "treeview": {"description": "TreeView module", "submodules": [], "classlist": ["TreeNode", "TreeView"], "filelist": ["vector.js"], "subdata": {}, "requires": "base,widget-parentchild\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "treeview"}, "history": {"description": "The History module provides the hability to use the browser's back and forward button", "submodules": [], "classlist": ["History"], "filelist": ["imageloader.js"], "subdata": {}, "requires": "base\nCopyright (c) 2011, Juan Ignacio Dopazo. All rights reserved.\nCode licensed under the BSD License\nhttps://github.com/juandopazo/jet/blob/master/LICENSE.md", "name": "history"}}, "filemap": {"paginator.js": {"classlist": ["Paginator"], "name": "paginator.js", "module": "node"}, "tabview.js": {"classlist": ["Tab", "TabView"], "name": "tabview.js", "module": "swf"}, "button.js": {"classlist": ["Button", "ToggleButton", "ButtonGroup", "ComboOption", "ComboBox", "RadioButton", "RadioGroup", "CheckBox", "CheckBoxGroup"], "name": "button.js", "module": "anim"}, "datasource.js": {"classlist": ["Record", "RecordSet", "DataSource", "DataSource.Get", "DataSource.Ajax", "DataSource.XDR", "DataSource.Local"], "name": "datasource.js", "module": "cookie"}, "container.js": {"classlist": ["Module", "Overlay", "Tooltip", "PanelBase", "Panel", "StaticPanel", "SimpleDialog"], "name": "container.js", "module": "button"}, "log.js": {"classlist": ["Log"], "name": "log.js", "module": "layout"}, "node.js": {"classlist": ["EventCache", "DOM", "NodeList"], "name": "node.js", "module": "menu"}, "vector.js": {"classlist": ["Vector", "Vector.Rectangle", "Vector.RoundedRectangle", "Vector.Ellipse", "Vector.Circle", "Vector.Line", "Vector.Path", "Vector.Text", "Vector.Image", "VectorView"], "name": "vector.js", "module": "treeview"}, "treeview.js": {"classlist": ["TreeNode", "TreeView"], "name": "treeview.js", "module": "tabview"}, "json.js": {"classlist": ["JSON"], "name": "json.js", "module": "base"}, "datatable.js": {"classlist": ["Cell", "Column", "DataTable"], "name": "datatable.js", "module": "datasource"}, "menu.js": {"classlist": ["MenuItem", "Menu"], "name": "menu.js", "module": "log"}, "widget-stack.js": {"classlist": ["WidgetStack"], "name": "widget-stack.js", "module": "widget-sandbox"}, "resize.js": {"classlist": ["Resize"], "name": "resize.js", "module": "progressbar"}, "progressbar.js": {"classlist": ["ProgressBar"], "name": "progressbar.js", "module": "paginator"}, "imageloader.js": {"classlist": ["Image", "ImageLoader"], "name": "imageloader.js", "module": "history"}, "swf.js": {"classlist": [], "name": "swf.js", "module": "resize"}, "jet.js": {"classlist": ["Lang", "Array", "Hash", "UA", "Get", "Core", "jet", "Log", "EventCache", "DOM", "NodeList", "OOP", "EventTarget", "Attribute", "Base", "Utility", "Widget", "Mouse"], "name": "jet.js", "module": "io"}, "history.js": {"classlist": ["History"], "name": "history.js", "module": "dragdrop"}, "widget-alignment.js": {"classlist": ["WidgetAlignment"], "name": "widget-alignment.js", "module": "vector"}, "io-xdr.js": {"classlist": [], "name": "io-xdr.js", "module": "imageloader"}, "dragdrop.js": {"classlist": ["Drag", "DragDrop"], "name": "dragdrop.js", "module": "datatable"}, "cookie.js": {"classlist": ["Cookie"], "name": "cookie.js", "module": "container"}, "sizzle.js": {"classlist": [], "name": "sizzle.js", "module": "resize"}, "io.js": {"classlist": ["IO"], "name": "io.js", "module": "io-xdr"}, "anim.js": {"classlist": ["Easing", "TimeFrame", "Tween"], "name": "anim.js", "module": "anim"}, "widget-parentchild.js": {"classlist": ["WidgetParent", "WidgetChild"], "name": "widget-parentchild.js", "module": "widget-alignment"}, "layout.js": {"classlist": ["LayoutPanelBase", "LayoutPanel", "Layout"], "name": "layout.js", "module": "json"}, "widget-sandbox.js": {"classlist": ["Frame", "Sandbox"], "name": "widget-sandbox.js", "module": "widget-parentchild"}}}